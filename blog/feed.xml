<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Mads Buch</title>
    <description>Technical articles
</description>
    <link>http://madsbuch.com/blog/</link>
    <atom:link href="http://madsbuch.com/blog/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Thu, 28 Feb 2019 19:13:35 +0100</pubDate>
    <lastBuildDate>Thu, 28 Feb 2019 19:13:35 +0100</lastBuildDate>
    <generator>Jekyll v3.7.4</generator>
    
      <item>
        <title>The Probability Monad</title>
        <description>&lt;!-- Why is this interesting? --&gt;
&lt;p&gt;What are the foundational structures of probabilities? How do we design
a language making it easy to model probabilistic problems? Oftentimes
the modeling happens directly in terms of vectors and matrices,
but there are better ways.&lt;/p&gt;

&lt;p&gt;In this article, we explore a structure, the monad, that spans probabilities.
It is based on the article &lt;em&gt;Stochastic Lambda Calculus and Monads of 
Probability Distributions&lt;/em&gt; by Ramsey and Pfeffer.&lt;/p&gt;

&lt;p&gt;The source for this article is available as a
&lt;a href=&quot;https://gist.github.com/madsbuch/5a8a1fc9b70621dd93dd70058754b126&quot;&gt;gist on Github&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&quot;a-monad&quot;&gt;A Monad&lt;/h1&gt;
&lt;p&gt;A monad is a mathematical structure with wide applications in
functional programming. The reason is that it helps to hide away
some state and provides primitives for progressing the structure in
a linear fashion.&lt;/p&gt;

&lt;p&gt;It is useful to know about monads. Not just for understanding the probability
monad, but because they are an important tool to architect applications using
functional techniques.&lt;/p&gt;

&lt;p&gt;A monad is a well-elaborated subject, and as such, I am not elaborating on it
more than its algebraic structure. To get a proper overview on there exists
plenty resources.&lt;/p&gt;

&lt;p&gt;For our practical use of the monad, we need to implement following functions
in a way such that they satisfy the monadic laws.&lt;/p&gt;

&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- pronounced bind&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;These are what constitutes monads.&lt;/p&gt;

&lt;h1 id=&quot;probabilities&quot;&gt;Probabilities&lt;/h1&gt;
&lt;p&gt;When talking about events and the probability that they happen we often
talk in terms of distributions. In its most abstract form a distribution
is simply a total function, i.e. all inputs need to be mapped to outputs.
This is also the view we take on it and the monad turns out to be a way of
packaging these programs to only allow certain operations on them.&lt;/p&gt;

&lt;p&gt;We only discuss discrete probability distributions here. This
makes it considerably easier to reason about but also poses some limitations
as we can only model continuous distributions to an arbitrary degree.&lt;/p&gt;

&lt;p&gt;On the probability distributions, we want to do certain queries. Some often used ones are
the &lt;code class=&quot;highlighter-rouge&quot;&gt;expectation&lt;/code&gt;, the &lt;code class=&quot;highlighter-rouge&quot;&gt;support&lt;/code&gt;, and the &lt;code class=&quot;highlighter-rouge&quot;&gt;sample&lt;/code&gt; query. The &lt;code class=&quot;highlighter-rouge&quot;&gt;expectation&lt;/code&gt;
and the &lt;code class=&quot;highlighter-rouge&quot;&gt;support&lt;/code&gt; queries are much easier to think about when only
considering discrete distributions.&lt;/p&gt;

&lt;p&gt;Lastly, we also need an operation for building distributions. In this work,
we take offset in a single function called &lt;code class=&quot;highlighter-rouge&quot;&gt;choose&lt;/code&gt; which act as a construct
that binary chooses between two distribution with a certain probability.&lt;/p&gt;

&lt;p&gt;To end choosing we use the return construction, which is the same as the Dirac
distribution. In some papers and languages, Dirac is used as the name for
return.&lt;/p&gt;

&lt;h1 id=&quot;class-hierarchy&quot;&gt;Class Hierarchy&lt;/h1&gt;
&lt;p&gt;To get an overview of the implementation of the probability monad
it makes sense to look at the class hierarchy we are considering.&lt;/p&gt;

&lt;p&gt;The following figure shows the monads we are implementing.&lt;/p&gt;

&lt;svg height=&quot;330&quot; width=&quot;100%&quot;&gt;&lt;defs&gt;&lt;marker id=&quot;triangle&quot; viewBox=&quot;0 0 14 14&quot; refX=&quot;0&quot; refY=&quot;5&quot; markerUnits=&quot;strokeWidth&quot; markerWidth=&quot;10&quot; markerHeight=&quot;10&quot; orient=&quot;auto&quot;&gt;&lt;path d=&quot;M 0 0 L 10 5 L 0 10 z&quot;&gt;&lt;/path&gt;&lt;/marker&gt;&lt;/defs&gt;&lt;line x1=&quot;4&quot; x2=&quot;12&quot; y1=&quot;8&quot; y2=&quot;8&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;4&quot; x2=&quot;4&quot; y1=&quot;8&quot; y2=&quot;16&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;8&quot; x2=&quot;16&quot; y1=&quot;8&quot; y2=&quot;8&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;16&quot; x2=&quot;24&quot; y1=&quot;8&quot; y2=&quot;8&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;24&quot; x2=&quot;32&quot; y1=&quot;8&quot; y2=&quot;8&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;32&quot; x2=&quot;40&quot; y1=&quot;8&quot; y2=&quot;8&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;40&quot; x2=&quot;48&quot; y1=&quot;8&quot; y2=&quot;8&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;48&quot; x2=&quot;56&quot; y1=&quot;8&quot; y2=&quot;8&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;56&quot; x2=&quot;64&quot; y1=&quot;8&quot; y2=&quot;8&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;64&quot; x2=&quot;72&quot; y1=&quot;8&quot; y2=&quot;8&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;72&quot; x2=&quot;80&quot; y1=&quot;8&quot; y2=&quot;8&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;80&quot; x2=&quot;88&quot; y1=&quot;8&quot; y2=&quot;8&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;88&quot; x2=&quot;96&quot; y1=&quot;8&quot; y2=&quot;8&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;96&quot; x2=&quot;104&quot; y1=&quot;8&quot; y2=&quot;8&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;104&quot; x2=&quot;112&quot; y1=&quot;8&quot; y2=&quot;8&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;112&quot; x2=&quot;120&quot; y1=&quot;8&quot; y2=&quot;8&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;120&quot; x2=&quot;128&quot; y1=&quot;8&quot; y2=&quot;8&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;128&quot; x2=&quot;136&quot; y1=&quot;8&quot; y2=&quot;8&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;136&quot; x2=&quot;144&quot; y1=&quot;8&quot; y2=&quot;8&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;144&quot; x2=&quot;152&quot; y1=&quot;8&quot; y2=&quot;8&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;152&quot; x2=&quot;160&quot; y1=&quot;8&quot; y2=&quot;8&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;160&quot; x2=&quot;168&quot; y1=&quot;8&quot; y2=&quot;8&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;168&quot; x2=&quot;176&quot; y1=&quot;8&quot; y2=&quot;8&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;176&quot; x2=&quot;184&quot; y1=&quot;8&quot; y2=&quot;8&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;184&quot; x2=&quot;192&quot; y1=&quot;8&quot; y2=&quot;8&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;192&quot; x2=&quot;200&quot; y1=&quot;8&quot; y2=&quot;8&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;200&quot; x2=&quot;208&quot; y1=&quot;8&quot; y2=&quot;8&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;208&quot; x2=&quot;216&quot; y1=&quot;8&quot; y2=&quot;8&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;216&quot; x2=&quot;224&quot; y1=&quot;8&quot; y2=&quot;8&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;224&quot; x2=&quot;232&quot; y1=&quot;8&quot; y2=&quot;8&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;232&quot; x2=&quot;240&quot; y1=&quot;8&quot; y2=&quot;8&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;240&quot; x2=&quot;248&quot; y1=&quot;8&quot; y2=&quot;8&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;248&quot; x2=&quot;256&quot; y1=&quot;8&quot; y2=&quot;8&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;256&quot; x2=&quot;264&quot; y1=&quot;8&quot; y2=&quot;8&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;264&quot; x2=&quot;272&quot; y1=&quot;8&quot; y2=&quot;8&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;272&quot; x2=&quot;280&quot; y1=&quot;8&quot; y2=&quot;8&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;280&quot; x2=&quot;288&quot; y1=&quot;8&quot; y2=&quot;8&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;288&quot; x2=&quot;296&quot; y1=&quot;8&quot; y2=&quot;8&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;296&quot; x2=&quot;304&quot; y1=&quot;8&quot; y2=&quot;8&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;304&quot; x2=&quot;312&quot; y1=&quot;8&quot; y2=&quot;8&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;312&quot; x2=&quot;320&quot; y1=&quot;8&quot; y2=&quot;8&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;320&quot; x2=&quot;328&quot; y1=&quot;8&quot; y2=&quot;8&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;328&quot; x2=&quot;332&quot; y1=&quot;8&quot; y2=&quot;8&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;332&quot; x2=&quot;332&quot; y1=&quot;8&quot; y2=&quot;16&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;4&quot; x2=&quot;4&quot; y1=&quot;16&quot; y2=&quot;32&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;332&quot; x2=&quot;332&quot; y1=&quot;16&quot; y2=&quot;32&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;4&quot; x2=&quot;4&quot; y1=&quot;32&quot; y2=&quot;48&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;text x=&quot;150&quot; y=&quot;44&quot; style=&quot;font-size:14px;font-family:monospace&quot;&gt;M&lt;/text&gt;&lt;text x=&quot;158&quot; y=&quot;44&quot; style=&quot;font-size:14px;font-family:monospace&quot;&gt;o&lt;/text&gt;&lt;text x=&quot;166&quot; y=&quot;44&quot; style=&quot;font-size:14px;font-family:monospace&quot;&gt;n&lt;/text&gt;&lt;text x=&quot;174&quot; y=&quot;44&quot; style=&quot;font-size:14px;font-family:monospace&quot;&gt;a&lt;/text&gt;&lt;text x=&quot;182&quot; y=&quot;44&quot; style=&quot;font-size:14px;font-family:monospace&quot;&gt;d&lt;/text&gt;&lt;line x1=&quot;332&quot; x2=&quot;332&quot; y1=&quot;32&quot; y2=&quot;48&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;4&quot; x2=&quot;4&quot; y1=&quot;48&quot; y2=&quot;64&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;332&quot; x2=&quot;332&quot; y1=&quot;48&quot; y2=&quot;64&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;4&quot; x2=&quot;4&quot; y1=&quot;64&quot; y2=&quot;72&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;4&quot; x2=&quot;12&quot; y1=&quot;72&quot; y2=&quot;72&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;8&quot; x2=&quot;16&quot; y1=&quot;72&quot; y2=&quot;72&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;16&quot; x2=&quot;24&quot; y1=&quot;72&quot; y2=&quot;72&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;24&quot; x2=&quot;32&quot; y1=&quot;72&quot; y2=&quot;72&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;32&quot; x2=&quot;40&quot; y1=&quot;72&quot; y2=&quot;72&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;40&quot; x2=&quot;48&quot; y1=&quot;72&quot; y2=&quot;72&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;48&quot; x2=&quot;56&quot; y1=&quot;72&quot; y2=&quot;72&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;56&quot; x2=&quot;64&quot; y1=&quot;72&quot; y2=&quot;72&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;64&quot; x2=&quot;72&quot; y1=&quot;72&quot; y2=&quot;72&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;72&quot; x2=&quot;80&quot; y1=&quot;72&quot; y2=&quot;72&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;80&quot; x2=&quot;88&quot; y1=&quot;72&quot; y2=&quot;72&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;88&quot; x2=&quot;96&quot; y1=&quot;72&quot; y2=&quot;72&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;96&quot; x2=&quot;104&quot; y1=&quot;72&quot; y2=&quot;72&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;104&quot; x2=&quot;112&quot; y1=&quot;72&quot; y2=&quot;72&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;112&quot; x2=&quot;120&quot; y1=&quot;72&quot; y2=&quot;72&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;120&quot; x2=&quot;128&quot; y1=&quot;72&quot; y2=&quot;72&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;128&quot; x2=&quot;136&quot; y1=&quot;72&quot; y2=&quot;72&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;136&quot; x2=&quot;144&quot; y1=&quot;72&quot; y2=&quot;72&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;144&quot; x2=&quot;152&quot; y1=&quot;72&quot; y2=&quot;72&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;152&quot; x2=&quot;160&quot; y1=&quot;72&quot; y2=&quot;72&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;160&quot; x2=&quot;168&quot; y1=&quot;72&quot; y2=&quot;72&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;168&quot; x2=&quot;172&quot; y1=&quot;72&quot; y2=&quot;72&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;172&quot; x2=&quot;180&quot; y1=&quot;72&quot; y2=&quot;72&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;172&quot; x2=&quot;172&quot; y1=&quot;72&quot; y2=&quot;80&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;176&quot; x2=&quot;184&quot; y1=&quot;72&quot; y2=&quot;72&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;184&quot; x2=&quot;192&quot; y1=&quot;72&quot; y2=&quot;72&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;192&quot; x2=&quot;200&quot; y1=&quot;72&quot; y2=&quot;72&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;200&quot; x2=&quot;208&quot; y1=&quot;72&quot; y2=&quot;72&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;208&quot; x2=&quot;216&quot; y1=&quot;72&quot; y2=&quot;72&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;216&quot; x2=&quot;224&quot; y1=&quot;72&quot; y2=&quot;72&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;224&quot; x2=&quot;232&quot; y1=&quot;72&quot; y2=&quot;72&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;232&quot; x2=&quot;240&quot; y1=&quot;72&quot; y2=&quot;72&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;240&quot; x2=&quot;248&quot; y1=&quot;72&quot; y2=&quot;72&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;248&quot; x2=&quot;256&quot; y1=&quot;72&quot; y2=&quot;72&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;256&quot; x2=&quot;264&quot; y1=&quot;72&quot; y2=&quot;72&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;264&quot; x2=&quot;272&quot; y1=&quot;72&quot; y2=&quot;72&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;272&quot; x2=&quot;280&quot; y1=&quot;72&quot; y2=&quot;72&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;280&quot; x2=&quot;288&quot; y1=&quot;72&quot; y2=&quot;72&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;288&quot; x2=&quot;296&quot; y1=&quot;72&quot; y2=&quot;72&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;296&quot; x2=&quot;304&quot; y1=&quot;72&quot; y2=&quot;72&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;304&quot; x2=&quot;312&quot; y1=&quot;72&quot; y2=&quot;72&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;312&quot; x2=&quot;320&quot; y1=&quot;72&quot; y2=&quot;72&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;320&quot; x2=&quot;328&quot; y1=&quot;72&quot; y2=&quot;72&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;332&quot; x2=&quot;332&quot; y1=&quot;64&quot; y2=&quot;72&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;328&quot; x2=&quot;332&quot; y1=&quot;72&quot; y2=&quot;72&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;172&quot; x2=&quot;172&quot; y1=&quot;80&quot; y2=&quot;96&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;172&quot; x2=&quot;172&quot; y1=&quot;96&quot; y2=&quot;112&quot; style=&quot;stroke: rgb(0,0,0);stroke-width:1&quot; marker-end=&quot;url(#triangle)&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;4&quot; x2=&quot;12&quot; y1=&quot;120&quot; y2=&quot;120&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;4&quot; x2=&quot;4&quot; y1=&quot;120&quot; y2=&quot;128&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;8&quot; x2=&quot;16&quot; y1=&quot;120&quot; y2=&quot;120&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;16&quot; x2=&quot;24&quot; y1=&quot;120&quot; y2=&quot;120&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;24&quot; x2=&quot;32&quot; y1=&quot;120&quot; y2=&quot;120&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;32&quot; x2=&quot;40&quot; y1=&quot;120&quot; y2=&quot;120&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;40&quot; x2=&quot;48&quot; y1=&quot;120&quot; y2=&quot;120&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;48&quot; x2=&quot;56&quot; y1=&quot;120&quot; y2=&quot;120&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;56&quot; x2=&quot;64&quot; y1=&quot;120&quot; y2=&quot;120&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;64&quot; x2=&quot;72&quot; y1=&quot;120&quot; y2=&quot;120&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;72&quot; x2=&quot;80&quot; y1=&quot;120&quot; y2=&quot;120&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;80&quot; x2=&quot;88&quot; y1=&quot;120&quot; y2=&quot;120&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;88&quot; x2=&quot;96&quot; y1=&quot;120&quot; y2=&quot;120&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;96&quot; x2=&quot;104&quot; y1=&quot;120&quot; y2=&quot;120&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;104&quot; x2=&quot;112&quot; y1=&quot;120&quot; y2=&quot;120&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;112&quot; x2=&quot;120&quot; y1=&quot;120&quot; y2=&quot;120&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;120&quot; x2=&quot;128&quot; y1=&quot;120&quot; y2=&quot;120&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;128&quot; x2=&quot;136&quot; y1=&quot;120&quot; y2=&quot;120&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;136&quot; x2=&quot;144&quot; y1=&quot;120&quot; y2=&quot;120&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;144&quot; x2=&quot;152&quot; y1=&quot;120&quot; y2=&quot;120&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;152&quot; x2=&quot;160&quot; y1=&quot;120&quot; y2=&quot;120&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;160&quot; x2=&quot;168&quot; y1=&quot;120&quot; y2=&quot;120&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;168&quot; x2=&quot;176&quot; y1=&quot;120&quot; y2=&quot;120&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;176&quot; x2=&quot;184&quot; y1=&quot;120&quot; y2=&quot;120&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;184&quot; x2=&quot;192&quot; y1=&quot;120&quot; y2=&quot;120&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;192&quot; x2=&quot;200&quot; y1=&quot;120&quot; y2=&quot;120&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;200&quot; x2=&quot;208&quot; y1=&quot;120&quot; y2=&quot;120&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;208&quot; x2=&quot;216&quot; y1=&quot;120&quot; y2=&quot;120&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;216&quot; x2=&quot;224&quot; y1=&quot;120&quot; y2=&quot;120&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;224&quot; x2=&quot;232&quot; y1=&quot;120&quot; y2=&quot;120&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;232&quot; x2=&quot;240&quot; y1=&quot;120&quot; y2=&quot;120&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;240&quot; x2=&quot;248&quot; y1=&quot;120&quot; y2=&quot;120&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;248&quot; x2=&quot;256&quot; y1=&quot;120&quot; y2=&quot;120&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;256&quot; x2=&quot;264&quot; y1=&quot;120&quot; y2=&quot;120&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;264&quot; x2=&quot;272&quot; y1=&quot;120&quot; y2=&quot;120&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;272&quot; x2=&quot;280&quot; y1=&quot;120&quot; y2=&quot;120&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;280&quot; x2=&quot;288&quot; y1=&quot;120&quot; y2=&quot;120&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;288&quot; x2=&quot;296&quot; y1=&quot;120&quot; y2=&quot;120&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;296&quot; x2=&quot;304&quot; y1=&quot;120&quot; y2=&quot;120&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;304&quot; x2=&quot;312&quot; y1=&quot;120&quot; y2=&quot;120&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;312&quot; x2=&quot;320&quot; y1=&quot;120&quot; y2=&quot;120&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;320&quot; x2=&quot;328&quot; y1=&quot;120&quot; y2=&quot;120&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;328&quot; x2=&quot;336&quot; y1=&quot;120&quot; y2=&quot;120&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;336&quot; x2=&quot;340&quot; y1=&quot;120&quot; y2=&quot;120&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;340&quot; x2=&quot;340&quot; y1=&quot;120&quot; y2=&quot;128&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;4&quot; x2=&quot;4&quot; y1=&quot;128&quot; y2=&quot;144&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;340&quot; x2=&quot;340&quot; y1=&quot;128&quot; y2=&quot;144&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;4&quot; x2=&quot;4&quot; y1=&quot;144&quot; y2=&quot;160&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;text x=&quot;94&quot; y=&quot;156&quot; style=&quot;font-size:14px;font-family:monospace&quot;&gt;P&lt;/text&gt;&lt;text x=&quot;102&quot; y=&quot;156&quot; style=&quot;font-size:14px;font-family:monospace&quot;&gt;r&lt;/text&gt;&lt;text x=&quot;110&quot; y=&quot;156&quot; style=&quot;font-size:14px;font-family:monospace&quot;&gt;o&lt;/text&gt;&lt;text x=&quot;118&quot; y=&quot;156&quot; style=&quot;font-size:14px;font-family:monospace&quot;&gt;b&lt;/text&gt;&lt;text x=&quot;126&quot; y=&quot;156&quot; style=&quot;font-size:14px;font-family:monospace&quot;&gt;a&lt;/text&gt;&lt;text x=&quot;134&quot; y=&quot;156&quot; style=&quot;font-size:14px;font-family:monospace&quot;&gt;b&lt;/text&gt;&lt;text x=&quot;142&quot; y=&quot;156&quot; style=&quot;font-size:14px;font-family:monospace&quot;&gt;i&lt;/text&gt;&lt;text x=&quot;150&quot; y=&quot;156&quot; style=&quot;font-size:14px;font-family:monospace&quot;&gt;l&lt;/text&gt;&lt;text x=&quot;158&quot; y=&quot;156&quot; style=&quot;font-size:14px;font-family:monospace&quot;&gt;i&lt;/text&gt;&lt;text x=&quot;166&quot; y=&quot;156&quot; style=&quot;font-size:14px;font-family:monospace&quot;&gt;t&lt;/text&gt;&lt;text x=&quot;174&quot; y=&quot;156&quot; style=&quot;font-size:14px;font-family:monospace&quot;&gt;y&lt;/text&gt;&lt;text x=&quot;190&quot; y=&quot;156&quot; style=&quot;font-size:14px;font-family:monospace&quot;&gt;M&lt;/text&gt;&lt;text x=&quot;198&quot; y=&quot;156&quot; style=&quot;font-size:14px;font-family:monospace&quot;&gt;o&lt;/text&gt;&lt;text x=&quot;206&quot; y=&quot;156&quot; style=&quot;font-size:14px;font-family:monospace&quot;&gt;n&lt;/text&gt;&lt;text x=&quot;214&quot; y=&quot;156&quot; style=&quot;font-size:14px;font-family:monospace&quot;&gt;a&lt;/text&gt;&lt;text x=&quot;222&quot; y=&quot;156&quot; style=&quot;font-size:14px;font-family:monospace&quot;&gt;d&lt;/text&gt;&lt;line x1=&quot;340&quot; x2=&quot;340&quot; y1=&quot;144&quot; y2=&quot;160&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;4&quot; x2=&quot;4&quot; y1=&quot;160&quot; y2=&quot;176&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;340&quot; x2=&quot;340&quot; y1=&quot;160&quot; y2=&quot;176&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;4&quot; x2=&quot;4&quot; y1=&quot;176&quot; y2=&quot;184&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;4&quot; x2=&quot;12&quot; y1=&quot;184&quot; y2=&quot;184&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;8&quot; x2=&quot;16&quot; y1=&quot;184&quot; y2=&quot;184&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;16&quot; x2=&quot;24&quot; y1=&quot;184&quot; y2=&quot;184&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;24&quot; x2=&quot;32&quot; y1=&quot;184&quot; y2=&quot;184&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;32&quot; x2=&quot;40&quot; y1=&quot;184&quot; y2=&quot;184&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;40&quot; x2=&quot;48&quot; y1=&quot;184&quot; y2=&quot;184&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;48&quot; x2=&quot;56&quot; y1=&quot;184&quot; y2=&quot;184&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;56&quot; x2=&quot;60&quot; y1=&quot;184&quot; y2=&quot;184&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;60&quot; x2=&quot;68&quot; y1=&quot;184&quot; y2=&quot;184&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;60&quot; x2=&quot;60&quot; y1=&quot;184&quot; y2=&quot;192&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;64&quot; x2=&quot;72&quot; y1=&quot;184&quot; y2=&quot;184&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;72&quot; x2=&quot;80&quot; y1=&quot;184&quot; y2=&quot;184&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;80&quot; x2=&quot;88&quot; y1=&quot;184&quot; y2=&quot;184&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;88&quot; x2=&quot;96&quot; y1=&quot;184&quot; y2=&quot;184&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;96&quot; x2=&quot;104&quot; y1=&quot;184&quot; y2=&quot;184&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;104&quot; x2=&quot;112&quot; y1=&quot;184&quot; y2=&quot;184&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;112&quot; x2=&quot;120&quot; y1=&quot;184&quot; y2=&quot;184&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;120&quot; x2=&quot;128&quot; y1=&quot;184&quot; y2=&quot;184&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;128&quot; x2=&quot;136&quot; y1=&quot;184&quot; y2=&quot;184&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;136&quot; x2=&quot;144&quot; y1=&quot;184&quot; y2=&quot;184&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;144&quot; x2=&quot;152&quot; y1=&quot;184&quot; y2=&quot;184&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;152&quot; x2=&quot;160&quot; y1=&quot;184&quot; y2=&quot;184&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;160&quot; x2=&quot;168&quot; y1=&quot;184&quot; y2=&quot;184&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;168&quot; x2=&quot;176&quot; y1=&quot;184&quot; y2=&quot;184&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;176&quot; x2=&quot;180&quot; y1=&quot;184&quot; y2=&quot;184&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;180&quot; x2=&quot;188&quot; y1=&quot;184&quot; y2=&quot;184&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;180&quot; x2=&quot;180&quot; y1=&quot;184&quot; y2=&quot;192&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;184&quot; x2=&quot;192&quot; y1=&quot;184&quot; y2=&quot;184&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;192&quot; x2=&quot;200&quot; y1=&quot;184&quot; y2=&quot;184&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;200&quot; x2=&quot;208&quot; y1=&quot;184&quot; y2=&quot;184&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;208&quot; x2=&quot;216&quot; y1=&quot;184&quot; y2=&quot;184&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;216&quot; x2=&quot;224&quot; y1=&quot;184&quot; y2=&quot;184&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;224&quot; x2=&quot;232&quot; y1=&quot;184&quot; y2=&quot;184&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;232&quot; x2=&quot;240&quot; y1=&quot;184&quot; y2=&quot;184&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;240&quot; x2=&quot;248&quot; y1=&quot;184&quot; y2=&quot;184&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;248&quot; x2=&quot;256&quot; y1=&quot;184&quot; y2=&quot;184&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;256&quot; x2=&quot;264&quot; y1=&quot;184&quot; y2=&quot;184&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;264&quot; x2=&quot;272&quot; y1=&quot;184&quot; y2=&quot;184&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;272&quot; x2=&quot;280&quot; y1=&quot;184&quot; y2=&quot;184&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;280&quot; x2=&quot;288&quot; y1=&quot;184&quot; y2=&quot;184&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;288&quot; x2=&quot;296&quot; y1=&quot;184&quot; y2=&quot;184&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;296&quot; x2=&quot;300&quot; y1=&quot;184&quot; y2=&quot;184&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;300&quot; x2=&quot;308&quot; y1=&quot;184&quot; y2=&quot;184&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;300&quot; x2=&quot;300&quot; y1=&quot;184&quot; y2=&quot;192&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;304&quot; x2=&quot;312&quot; y1=&quot;184&quot; y2=&quot;184&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;312&quot; x2=&quot;320&quot; y1=&quot;184&quot; y2=&quot;184&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;320&quot; x2=&quot;328&quot; y1=&quot;184&quot; y2=&quot;184&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;328&quot; x2=&quot;336&quot; y1=&quot;184&quot; y2=&quot;184&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;340&quot; x2=&quot;340&quot; y1=&quot;176&quot; y2=&quot;184&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;336&quot; x2=&quot;340&quot; y1=&quot;184&quot; y2=&quot;184&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;60&quot; x2=&quot;60&quot; y1=&quot;192&quot; y2=&quot;208&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;180&quot; x2=&quot;180&quot; y1=&quot;192&quot; y2=&quot;208&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;300&quot; x2=&quot;300&quot; y1=&quot;192&quot; y2=&quot;208&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;60&quot; x2=&quot;60&quot; y1=&quot;208&quot; y2=&quot;224&quot; style=&quot;stroke: rgb(0,0,0);stroke-width:1&quot; marker-end=&quot;url(#triangle)&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;180&quot; x2=&quot;180&quot; y1=&quot;208&quot; y2=&quot;224&quot; style=&quot;stroke: rgb(0,0,0);stroke-width:1&quot; marker-end=&quot;url(#triangle)&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;300&quot; x2=&quot;300&quot; y1=&quot;208&quot; y2=&quot;224&quot; style=&quot;stroke: rgb(0,0,0);stroke-width:1&quot; marker-end=&quot;url(#triangle)&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;4&quot; x2=&quot;12&quot; y1=&quot;232&quot; y2=&quot;232&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;4&quot; x2=&quot;4&quot; y1=&quot;232&quot; y2=&quot;240&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;8&quot; x2=&quot;16&quot; y1=&quot;232&quot; y2=&quot;232&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;16&quot; x2=&quot;24&quot; y1=&quot;232&quot; y2=&quot;232&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;24&quot; x2=&quot;32&quot; y1=&quot;232&quot; y2=&quot;232&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;32&quot; x2=&quot;40&quot; y1=&quot;232&quot; y2=&quot;232&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;40&quot; x2=&quot;48&quot; y1=&quot;232&quot; y2=&quot;232&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;48&quot; x2=&quot;56&quot; y1=&quot;232&quot; y2=&quot;232&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;56&quot; x2=&quot;64&quot; y1=&quot;232&quot; y2=&quot;232&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;64&quot; x2=&quot;72&quot; y1=&quot;232&quot; y2=&quot;232&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;72&quot; x2=&quot;80&quot; y1=&quot;232&quot; y2=&quot;232&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;80&quot; x2=&quot;88&quot; y1=&quot;232&quot; y2=&quot;232&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;88&quot; x2=&quot;96&quot; y1=&quot;232&quot; y2=&quot;232&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;96&quot; x2=&quot;104&quot; y1=&quot;232&quot; y2=&quot;232&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;104&quot; x2=&quot;112&quot; y1=&quot;232&quot; y2=&quot;232&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;112&quot; x2=&quot;116&quot; y1=&quot;232&quot; y2=&quot;232&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;116&quot; x2=&quot;116&quot; y1=&quot;232&quot; y2=&quot;240&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;140&quot; x2=&quot;148&quot; y1=&quot;232&quot; y2=&quot;232&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;140&quot; x2=&quot;140&quot; y1=&quot;232&quot; y2=&quot;240&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;144&quot; x2=&quot;152&quot; y1=&quot;232&quot; y2=&quot;232&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;152&quot; x2=&quot;160&quot; y1=&quot;232&quot; y2=&quot;232&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;160&quot; x2=&quot;168&quot; y1=&quot;232&quot; y2=&quot;232&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;168&quot; x2=&quot;176&quot; y1=&quot;232&quot; y2=&quot;232&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;176&quot; x2=&quot;184&quot; y1=&quot;232&quot; y2=&quot;232&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;184&quot; x2=&quot;192&quot; y1=&quot;232&quot; y2=&quot;232&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;192&quot; x2=&quot;200&quot; y1=&quot;232&quot; y2=&quot;232&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;200&quot; x2=&quot;208&quot; y1=&quot;232&quot; y2=&quot;232&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;208&quot; x2=&quot;216&quot; y1=&quot;232&quot; y2=&quot;232&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;216&quot; x2=&quot;220&quot; y1=&quot;232&quot; y2=&quot;232&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;220&quot; x2=&quot;220&quot; y1=&quot;232&quot; y2=&quot;240&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;244&quot; x2=&quot;252&quot; y1=&quot;232&quot; y2=&quot;232&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;244&quot; x2=&quot;244&quot; y1=&quot;232&quot; y2=&quot;240&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;248&quot; x2=&quot;256&quot; y1=&quot;232&quot; y2=&quot;232&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;256&quot; x2=&quot;264&quot; y1=&quot;232&quot; y2=&quot;232&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;264&quot; x2=&quot;272&quot; y1=&quot;232&quot; y2=&quot;232&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;272&quot; x2=&quot;280&quot; y1=&quot;232&quot; y2=&quot;232&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;280&quot; x2=&quot;288&quot; y1=&quot;232&quot; y2=&quot;232&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;288&quot; x2=&quot;296&quot; y1=&quot;232&quot; y2=&quot;232&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;296&quot; x2=&quot;304&quot; y1=&quot;232&quot; y2=&quot;232&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;304&quot; x2=&quot;312&quot; y1=&quot;232&quot; y2=&quot;232&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;312&quot; x2=&quot;320&quot; y1=&quot;232&quot; y2=&quot;232&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;320&quot; x2=&quot;328&quot; y1=&quot;232&quot; y2=&quot;232&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;328&quot; x2=&quot;336&quot; y1=&quot;232&quot; y2=&quot;232&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;336&quot; x2=&quot;340&quot; y1=&quot;232&quot; y2=&quot;232&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;340&quot; x2=&quot;340&quot; y1=&quot;232&quot; y2=&quot;240&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;4&quot; x2=&quot;4&quot; y1=&quot;240&quot; y2=&quot;256&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;116&quot; x2=&quot;116&quot; y1=&quot;240&quot; y2=&quot;256&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;140&quot; x2=&quot;140&quot; y1=&quot;240&quot; y2=&quot;256&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;220&quot; x2=&quot;220&quot; y1=&quot;240&quot; y2=&quot;256&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;244&quot; x2=&quot;244&quot; y1=&quot;240&quot; y2=&quot;256&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;340&quot; x2=&quot;340&quot; y1=&quot;240&quot; y2=&quot;256&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;4&quot; x2=&quot;4&quot; y1=&quot;256&quot; y2=&quot;272&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;text x=&quot;14&quot; y=&quot;268&quot; style=&quot;font-size:14px;font-family:monospace&quot;&gt;E&lt;/text&gt;&lt;text x=&quot;22&quot; y=&quot;268&quot; style=&quot;font-size:14px;font-family:monospace&quot;&gt;x&lt;/text&gt;&lt;text x=&quot;30&quot; y=&quot;268&quot; style=&quot;font-size:14px;font-family:monospace&quot;&gt;p&lt;/text&gt;&lt;text x=&quot;38&quot; y=&quot;268&quot; style=&quot;font-size:14px;font-family:monospace&quot;&gt;e&lt;/text&gt;&lt;text x=&quot;46&quot; y=&quot;268&quot; style=&quot;font-size:14px;font-family:monospace&quot;&gt;c&lt;/text&gt;&lt;text x=&quot;54&quot; y=&quot;268&quot; style=&quot;font-size:14px;font-family:monospace&quot;&gt;t&lt;/text&gt;&lt;text x=&quot;62&quot; y=&quot;268&quot; style=&quot;font-size:14px;font-family:monospace&quot;&gt;a&lt;/text&gt;&lt;text x=&quot;70&quot; y=&quot;268&quot; style=&quot;font-size:14px;font-family:monospace&quot;&gt;t&lt;/text&gt;&lt;text x=&quot;78&quot; y=&quot;268&quot; style=&quot;font-size:14px;font-family:monospace&quot;&gt;i&lt;/text&gt;&lt;text x=&quot;86&quot; y=&quot;268&quot; style=&quot;font-size:14px;font-family:monospace&quot;&gt;o&lt;/text&gt;&lt;text x=&quot;94&quot; y=&quot;268&quot; style=&quot;font-size:14px;font-family:monospace&quot;&gt;n&lt;/text&gt;&lt;line x1=&quot;116&quot; x2=&quot;116&quot; y1=&quot;256&quot; y2=&quot;272&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;140&quot; x2=&quot;140&quot; y1=&quot;256&quot; y2=&quot;272&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;text x=&quot;150&quot; y=&quot;268&quot; style=&quot;font-size:14px;font-family:monospace&quot;&gt;S&lt;/text&gt;&lt;text x=&quot;158&quot; y=&quot;268&quot; style=&quot;font-size:14px;font-family:monospace&quot;&gt;u&lt;/text&gt;&lt;text x=&quot;166&quot; y=&quot;268&quot; style=&quot;font-size:14px;font-family:monospace&quot;&gt;p&lt;/text&gt;&lt;text x=&quot;174&quot; y=&quot;268&quot; style=&quot;font-size:14px;font-family:monospace&quot;&gt;p&lt;/text&gt;&lt;text x=&quot;182&quot; y=&quot;268&quot; style=&quot;font-size:14px;font-family:monospace&quot;&gt;o&lt;/text&gt;&lt;text x=&quot;190&quot; y=&quot;268&quot; style=&quot;font-size:14px;font-family:monospace&quot;&gt;r&lt;/text&gt;&lt;text x=&quot;198&quot; y=&quot;268&quot; style=&quot;font-size:14px;font-family:monospace&quot;&gt;t&lt;/text&gt;&lt;line x1=&quot;220&quot; x2=&quot;220&quot; y1=&quot;256&quot; y2=&quot;272&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;244&quot; x2=&quot;244&quot; y1=&quot;256&quot; y2=&quot;272&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;text x=&quot;262&quot; y=&quot;268&quot; style=&quot;font-size:14px;font-family:monospace&quot;&gt;S&lt;/text&gt;&lt;text x=&quot;270&quot; y=&quot;268&quot; style=&quot;font-size:14px;font-family:monospace&quot;&gt;a&lt;/text&gt;&lt;text x=&quot;278&quot; y=&quot;268&quot; style=&quot;font-size:14px;font-family:monospace&quot;&gt;m&lt;/text&gt;&lt;text x=&quot;286&quot; y=&quot;268&quot; style=&quot;font-size:14px;font-family:monospace&quot;&gt;p&lt;/text&gt;&lt;text x=&quot;294&quot; y=&quot;268&quot; style=&quot;font-size:14px;font-family:monospace&quot;&gt;l&lt;/text&gt;&lt;text x=&quot;302&quot; y=&quot;268&quot; style=&quot;font-size:14px;font-family:monospace&quot;&gt;e&lt;/text&gt;&lt;line x1=&quot;340&quot; x2=&quot;340&quot; y1=&quot;256&quot; y2=&quot;272&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;4&quot; x2=&quot;4&quot; y1=&quot;272&quot; y2=&quot;288&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;text x=&quot;38&quot; y=&quot;284&quot; style=&quot;font-size:14px;font-family:monospace&quot;&gt;M&lt;/text&gt;&lt;text x=&quot;46&quot; y=&quot;284&quot; style=&quot;font-size:14px;font-family:monospace&quot;&gt;o&lt;/text&gt;&lt;text x=&quot;54&quot; y=&quot;284&quot; style=&quot;font-size:14px;font-family:monospace&quot;&gt;n&lt;/text&gt;&lt;text x=&quot;62&quot; y=&quot;284&quot; style=&quot;font-size:14px;font-family:monospace&quot;&gt;a&lt;/text&gt;&lt;text x=&quot;70&quot; y=&quot;284&quot; style=&quot;font-size:14px;font-family:monospace&quot;&gt;d&lt;/text&gt;&lt;line x1=&quot;116&quot; x2=&quot;116&quot; y1=&quot;272&quot; y2=&quot;288&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;140&quot; x2=&quot;140&quot; y1=&quot;272&quot; y2=&quot;288&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;text x=&quot;158&quot; y=&quot;284&quot; style=&quot;font-size:14px;font-family:monospace&quot;&gt;M&lt;/text&gt;&lt;text x=&quot;166&quot; y=&quot;284&quot; style=&quot;font-size:14px;font-family:monospace&quot;&gt;o&lt;/text&gt;&lt;text x=&quot;174&quot; y=&quot;284&quot; style=&quot;font-size:14px;font-family:monospace&quot;&gt;n&lt;/text&gt;&lt;text x=&quot;182&quot; y=&quot;284&quot; style=&quot;font-size:14px;font-family:monospace&quot;&gt;a&lt;/text&gt;&lt;text x=&quot;190&quot; y=&quot;284&quot; style=&quot;font-size:14px;font-family:monospace&quot;&gt;d&lt;/text&gt;&lt;line x1=&quot;220&quot; x2=&quot;220&quot; y1=&quot;272&quot; y2=&quot;288&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;244&quot; x2=&quot;244&quot; y1=&quot;272&quot; y2=&quot;288&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;text x=&quot;262&quot; y=&quot;284&quot; style=&quot;font-size:14px;font-family:monospace&quot;&gt;M&lt;/text&gt;&lt;text x=&quot;270&quot; y=&quot;284&quot; style=&quot;font-size:14px;font-family:monospace&quot;&gt;o&lt;/text&gt;&lt;text x=&quot;278&quot; y=&quot;284&quot; style=&quot;font-size:14px;font-family:monospace&quot;&gt;n&lt;/text&gt;&lt;text x=&quot;286&quot; y=&quot;284&quot; style=&quot;font-size:14px;font-family:monospace&quot;&gt;a&lt;/text&gt;&lt;text x=&quot;294&quot; y=&quot;284&quot; style=&quot;font-size:14px;font-family:monospace&quot;&gt;d&lt;/text&gt;&lt;line x1=&quot;340&quot; x2=&quot;340&quot; y1=&quot;272&quot; y2=&quot;288&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;4&quot; x2=&quot;4&quot; y1=&quot;288&quot; y2=&quot;304&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;116&quot; x2=&quot;116&quot; y1=&quot;288&quot; y2=&quot;304&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;140&quot; x2=&quot;140&quot; y1=&quot;288&quot; y2=&quot;304&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;220&quot; x2=&quot;220&quot; y1=&quot;288&quot; y2=&quot;304&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;244&quot; x2=&quot;244&quot; y1=&quot;288&quot; y2=&quot;304&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;340&quot; x2=&quot;340&quot; y1=&quot;288&quot; y2=&quot;304&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;4&quot; x2=&quot;4&quot; y1=&quot;304&quot; y2=&quot;312&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;4&quot; x2=&quot;12&quot; y1=&quot;312&quot; y2=&quot;312&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;8&quot; x2=&quot;16&quot; y1=&quot;312&quot; y2=&quot;312&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;16&quot; x2=&quot;24&quot; y1=&quot;312&quot; y2=&quot;312&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;24&quot; x2=&quot;32&quot; y1=&quot;312&quot; y2=&quot;312&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;32&quot; x2=&quot;40&quot; y1=&quot;312&quot; y2=&quot;312&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;40&quot; x2=&quot;48&quot; y1=&quot;312&quot; y2=&quot;312&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;48&quot; x2=&quot;56&quot; y1=&quot;312&quot; y2=&quot;312&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;56&quot; x2=&quot;64&quot; y1=&quot;312&quot; y2=&quot;312&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;64&quot; x2=&quot;72&quot; y1=&quot;312&quot; y2=&quot;312&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;72&quot; x2=&quot;80&quot; y1=&quot;312&quot; y2=&quot;312&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;80&quot; x2=&quot;88&quot; y1=&quot;312&quot; y2=&quot;312&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;88&quot; x2=&quot;96&quot; y1=&quot;312&quot; y2=&quot;312&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;96&quot; x2=&quot;104&quot; y1=&quot;312&quot; y2=&quot;312&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;104&quot; x2=&quot;112&quot; y1=&quot;312&quot; y2=&quot;312&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;116&quot; x2=&quot;116&quot; y1=&quot;304&quot; y2=&quot;312&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;112&quot; x2=&quot;116&quot; y1=&quot;312&quot; y2=&quot;312&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;140&quot; x2=&quot;140&quot; y1=&quot;304&quot; y2=&quot;312&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;140&quot; x2=&quot;148&quot; y1=&quot;312&quot; y2=&quot;312&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;144&quot; x2=&quot;152&quot; y1=&quot;312&quot; y2=&quot;312&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;152&quot; x2=&quot;160&quot; y1=&quot;312&quot; y2=&quot;312&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;160&quot; x2=&quot;168&quot; y1=&quot;312&quot; y2=&quot;312&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;168&quot; x2=&quot;176&quot; y1=&quot;312&quot; y2=&quot;312&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;176&quot; x2=&quot;184&quot; y1=&quot;312&quot; y2=&quot;312&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;184&quot; x2=&quot;192&quot; y1=&quot;312&quot; y2=&quot;312&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;192&quot; x2=&quot;200&quot; y1=&quot;312&quot; y2=&quot;312&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;200&quot; x2=&quot;208&quot; y1=&quot;312&quot; y2=&quot;312&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;208&quot; x2=&quot;216&quot; y1=&quot;312&quot; y2=&quot;312&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;220&quot; x2=&quot;220&quot; y1=&quot;304&quot; y2=&quot;312&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;216&quot; x2=&quot;220&quot; y1=&quot;312&quot; y2=&quot;312&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;244&quot; x2=&quot;244&quot; y1=&quot;304&quot; y2=&quot;312&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;244&quot; x2=&quot;252&quot; y1=&quot;312&quot; y2=&quot;312&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;248&quot; x2=&quot;256&quot; y1=&quot;312&quot; y2=&quot;312&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;256&quot; x2=&quot;264&quot; y1=&quot;312&quot; y2=&quot;312&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;264&quot; x2=&quot;272&quot; y1=&quot;312&quot; y2=&quot;312&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;272&quot; x2=&quot;280&quot; y1=&quot;312&quot; y2=&quot;312&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;280&quot; x2=&quot;288&quot; y1=&quot;312&quot; y2=&quot;312&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;288&quot; x2=&quot;296&quot; y1=&quot;312&quot; y2=&quot;312&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;296&quot; x2=&quot;304&quot; y1=&quot;312&quot; y2=&quot;312&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;304&quot; x2=&quot;312&quot; y1=&quot;312&quot; y2=&quot;312&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;312&quot; x2=&quot;320&quot; y1=&quot;312&quot; y2=&quot;312&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;320&quot; x2=&quot;328&quot; y1=&quot;312&quot; y2=&quot;312&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;328&quot; x2=&quot;336&quot; y1=&quot;312&quot; y2=&quot;312&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;340&quot; x2=&quot;340&quot; y1=&quot;304&quot; y2=&quot;312&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;line x1=&quot;336&quot; x2=&quot;340&quot; y1=&quot;312&quot; y2=&quot;312&quot; stroke=&quot;rgb(0,0,0)&quot; stroke-width=&quot;1&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;mitter&quot;&gt;&lt;/line&gt;&lt;/svg&gt;

&lt;p&gt;The lowermost three boxes are the most interesting. Those are the queries, the
operations we can use on a distribution to make sense of it.&lt;/p&gt;

&lt;h1 id=&quot;the-expectation-monad&quot;&gt;The Expectation Monad&lt;/h1&gt;
&lt;p&gt;This section elaborates on a measure theoretic approach to the
probability monad. We represent the distribution as a continuation
that takes a measure function and returns an expectation.&lt;/p&gt;

&lt;p&gt;First, we will take a look at our monad type.&lt;/p&gt;

&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;-- Probability Monad&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;newtype&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;PExp&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;P&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Double&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Double&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It is worth looking into what happens here. We have the constructor
&lt;code class=&quot;highlighter-rouge&quot;&gt;PExp&lt;/code&gt;, that takes a function, a &lt;em&gt;measure function&lt;/em&gt;, and gives the
expectation.&lt;/p&gt;

&lt;p&gt;The monadic structure of probability distributions is in this setting
implemented as follows.&lt;/p&gt;

&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kr&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Monad&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;P&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;P&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;P&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
       &lt;span class=&quot;kt&quot;&gt;P&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;apply&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;P&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;apply&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;
                  &lt;span class=&quot;kr&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;From here the expectation monad is easily implemented as the whole
monad type is built around it.&lt;/p&gt;

&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kr&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ExpMonad&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;PExp&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;expectation&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;PExp&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We could now start to do experiments base on this. But we would much
rather like to play with &lt;code class=&quot;highlighter-rouge&quot;&gt;support&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;sample&lt;/code&gt; also. These, however,
are quite difficult to implement using the type of &lt;code class=&quot;highlighter-rouge&quot;&gt;PExp&lt;/code&gt; so we are
going to attack this from another angle.&lt;/p&gt;

&lt;h1 id=&quot;generalizing&quot;&gt;Generalizing&lt;/h1&gt;
&lt;p&gt;The above implementation of the monad type is not very suited for other than
the expectation query. To make something more suited, we will try to stay true
to the paper and implement a type such that we can hold data as it is defined&lt;/p&gt;

&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kr&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;P&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;R&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;P&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;B&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;P&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;P&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;P&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;C&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Probability&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;P&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;P&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;P&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The quick reader will see that we now use GADTs instead or ordinary ADTs. This
is due to the &lt;em&gt;Bind&lt;/em&gt; constructor. This poses a change of the type, and can not
be implemented by ADTs.&lt;/p&gt;

&lt;p&gt;In the instances for the monad and probability monad we simply defer everything
to used directly by the queries.&lt;/p&gt;

&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;-- P is a monad&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Monad&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;P&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;R&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;B&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;-- P is a probability monad&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ProbabilityMonad&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;P&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;choose&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;C&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This allows for definitions of the queries to be directly copied from the
paper. In addition to the &lt;code class=&quot;highlighter-rouge&quot;&gt;expectation&lt;/code&gt; query we had before, we can now also
do &lt;code class=&quot;highlighter-rouge&quot;&gt;support&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;sampling&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kr&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SupportMonad&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;P&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;support&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;R&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;support&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;B&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;concat&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;support&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;support&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;support&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;C&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;support&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;support&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d2&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;For the full source I once again refer to the
&lt;a href=&quot;https://gist.github.com/madsbuch/5a8a1fc9b70621dd93dd70058754b126&quot;&gt;gist on Github&lt;/a&gt;..&lt;/p&gt;

&lt;h1 id=&quot;making-distributions&quot;&gt;Making Distributions&lt;/h1&gt;
&lt;p&gt;In this section we will take a look on how to construct some interesting
distributions and how the queries work on them.&lt;/p&gt;

&lt;p&gt;As often when working with probabilities we will look on dices. To make
it easy we make a data type deriving &lt;code class=&quot;highlighter-rouge&quot;&gt;Enum&lt;/code&gt; for easy enumeration.&lt;/p&gt;

&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kr&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Dice&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;One&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Two&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Three&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Four&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Five&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Six&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;deriving&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Enum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Eq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Show&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Ord&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We can from here make a uniform distribution over the sides of a dice
like following.&lt;/p&gt;

&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;dist&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;P&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Dice&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;dist&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uniform&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;One&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;..&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Six&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;uniform&lt;/code&gt; method is a simple function that makes a uniform distribution
over a list using the &lt;code class=&quot;highlighter-rouge&quot;&gt;choose&lt;/code&gt; function and the length of the list.&lt;/p&gt;

&lt;p&gt;A support query can be performed as follows.&lt;/p&gt;

&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;example01a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;kr&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dist&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;P&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Dice&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;dist&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uniform&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;One&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;..&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Six&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;kr&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;support&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dist&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Yielding the result of &lt;code class=&quot;highlighter-rouge&quot;&gt;[One,Two,Three,Four,Five,Six]&lt;/code&gt;. To create a posterior
distribution from a prior, we use the bind. This translates into elegant and
easily readable dependent distributions.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;example02a =
    let dist :: P Dice
        dist = do
          d &amp;lt;- uniform [One .. Six]
          return (if d == Six then One else d)
    in support dist
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This yields the result &lt;code class=&quot;highlighter-rouge&quot;&gt;[One,Two,Three,Four,Five,One]&lt;/code&gt; Note how &lt;code class=&quot;highlighter-rouge&quot;&gt;One&lt;/code&gt; appears
twice. This make immediate sense from the definition of the distribution
though we would have expected duplications removed. However, this is quite
easily done in Haskell.&lt;/p&gt;

&lt;p&gt;The last example in the gist is one of the more interesting. The distribution
defined is potentially infinite. Intuitively it counts up with a probability
of a half and continues doing that.&lt;/p&gt;

&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;walk&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
   &lt;span class=&quot;kr&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uniform&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
      &lt;span class=&quot;kr&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bit&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;then&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
      &lt;span class=&quot;kr&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;walk&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So what happens when we throw the various queries on it?&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;support&lt;/strong&gt; query should return a list of all potential outcomes of the
distribution, and so it does. running &lt;code class=&quot;highlighter-rouge&quot;&gt;example03a&lt;/code&gt; returns
&lt;code class=&quot;highlighter-rouge&quot;&gt;[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,^CInterrupted.&lt;/code&gt;. If not
stopped it would continue counting up.&lt;/p&gt;

&lt;p&gt;An important remark here is that
order of the &lt;code class=&quot;highlighter-rouge&quot;&gt;True&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;False&lt;/code&gt; in the inner distribution. If we switch it
such that the inner distribution reads &lt;code class=&quot;highlighter-rouge&quot;&gt;uniform [False, True]&lt;/code&gt; it will never
return anything. Intuitively one can understand it as the last element is
unfold first. In the current ordering the walk function creates a list which
is reducible though infinite.&lt;/p&gt;

&lt;p&gt;Secondly we  have the &lt;strong&gt;expectation&lt;/strong&gt; query. issuing this yields an infinite
computation without any result. This is because we attempt to unroll the full
structure to get the expectation of an event.&lt;/p&gt;

&lt;p&gt;Lastly we have the &lt;strong&gt;sample&lt;/strong&gt; query. This query works completely as expected yielding a list of samples. Issuing &lt;code class=&quot;highlighter-rouge&quot;&gt;example03c&lt;/code&gt; will return
&lt;code class=&quot;highlighter-rouge&quot;&gt;[0,1,3,0,0,2,0,1,0,1]&lt;/code&gt; which intuitively makes sense.&lt;/p&gt;

&lt;p&gt;Though the expectation query is not possible through the current implementation
we could actually still get an idea about the expectations using the Monte
Carlo Technique. Sampling 10.000 elements of the walk distribution and taking
the frequency gives us following.&lt;/p&gt;

&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mc&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4937&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2483&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1294&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;630&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;326&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;159&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;87&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;34&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;27&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Which is what we would expect.&lt;/p&gt;

&lt;h1 id=&quot;concluding-remarks&quot;&gt;Concluding Remarks&lt;/h1&gt;
&lt;p&gt;We have discussed Ramsey and Pfeffer’s paper in this article. It provides a
fundamental understanding based in programming languages on distributions and
probabilities. It is interesting because it makes languages like Hakary much
easier to understand. Furthermore it also greatly simplifies the hole world of
probabilities.&lt;/p&gt;
</description>
        <pubDate>Sat, 03 Dec 2016 00:00:00 +0100</pubDate>
        <link>http://madsbuch.com/blog/the-probability-monad/</link>
        <guid isPermaLink="true">http://madsbuch.com/blog/the-probability-monad/</guid>
        
        
        <category>Probabilistic</category>
        
        <category>Programming</category>
        
      </item>
    
      <item>
        <title>Proving Stuff in Haskell</title>
        <description>&lt;p&gt;This article is my give on the relationship between mathematical proofs and
programming languages. Many details on specific implementation have been
left out with the aim for clarity and conceptual coherency.&lt;/p&gt;

&lt;p&gt;The source used in this article is available as
&lt;a href=&quot;https://gist.github.com/madsbuch/12043c4ad1c1fd0a80008ffb443e29d7&quot;&gt;a Gist&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&quot;proofs-and-programming&quot;&gt;Proofs and Programming&lt;/h1&gt;
&lt;p&gt;First, what is a proof? A proof is a series of deductive arguments, such that
the proposition is justified. This description might seem quite
abstract, so let us look at a concrete example using the Peano naturals for
representing natural numbers.&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;1+1 = 2&lt;/script&gt;

&lt;p&gt;As the proposition has no quantifiers, we can directly use the first
argument to reduce the expression. That is, the one given by the
usual definition of addition over Peano numbers.
We then have the following expression.&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;2 = 2&lt;/script&gt;

&lt;p&gt;We still have a mathematical object, a propositional claim.
We know from the Peano axioms, that
syntactical equivalence satisfies reflexivity, symmetry, and transitivity.
Henceforth the properties of equality are satisfied, and we may end our
deductive sequence.&lt;/p&gt;

&lt;p&gt;Next, we want to translate above into programming.&lt;/p&gt;

&lt;h2 id=&quot;in-haskell&quot;&gt;In Haskell&lt;/h2&gt;
&lt;p&gt;From the &lt;a href=&quot;https://en.wikipedia.org/wiki/Curry%E2%80%93Howard_correspondence&quot;&gt;Curry–Howard correspondence&lt;/a&gt;
we know that propositions are types and proofs are programs. Alright, so we
need to make an expression that has above expression as its type,
and a program which inhabits this type.&lt;/p&gt;

&lt;p&gt;First, we need to define our objects: Peano naturals and Equality. We implement
Peano naturals the usual way. I elaborate on this in a 
&lt;a href=&quot;/blog/100-days-of-fibonacci-day-9-haskell-types/&quot;&gt;previous post&lt;/a&gt;.
Equality is defined as follows.&lt;/p&gt;

&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kr&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Refl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;Refl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Refl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Evidently, we the value &lt;code class=&quot;highlighter-rouge&quot;&gt;Refl&lt;/code&gt; can only inhabit the type &lt;code class=&quot;highlighter-rouge&quot;&gt;Refl a b&lt;/code&gt; 
if the types &lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;b&lt;/code&gt; are identical.
Concerning the Curry-Howard correspondence, the &lt;code class=&quot;highlighter-rouge&quot;&gt;Refl&lt;/code&gt; value also
has the unit type - it is not possible to attach further data to
the constructor.&lt;/p&gt;

&lt;p&gt;We have defined equality in terms of reflection. However, we need equality
also to satisfy symmetry and transitivity. In the source, we have the code
needed for that.&lt;/p&gt;

&lt;p&gt;We now want to make the type&lt;sup id=&quot;fnref:prefix&quot;&gt;&lt;a href=&quot;#fn:prefix&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; for our proof, or, the equivalent to the 
proposition stated above:&lt;/p&gt;

&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;onePlusOneEqualsTwo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Refl&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Add&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;S&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;S&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;S&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;S&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;Add&lt;/code&gt; in the type definition is a type family defined in the source. It is
defined as we would usually define addition over Peano naturals.&lt;/p&gt;

&lt;p&gt;To prove it we need to make an inhabitant to that type. The program
is very simple
for this case as the Haskell compiler reduces the type level expression 
per semantics of type families.&lt;/p&gt;

&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;onePlusOneEqualsTwo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Refl&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As it compiles&lt;sup id=&quot;fnref:compiler&quot;&gt;&lt;a href=&quot;#fn:compiler&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt; it shows that Haskell is content with the proof.&lt;/p&gt;

&lt;h1 id=&quot;quantifiers&quot;&gt;Quantifiers&lt;/h1&gt;
&lt;p&gt;We want to abstract our proofs. In proving terminology, we do this through
quantifiers.&lt;/p&gt;

&lt;p&gt;To have a more graspable problem that includes only quantification,
without induction, we detour to boolean algebra. Here we can
try to formalize De Morgan’s theorem:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\forall a, b \in : \lnot( a \land b ) = \lnot a \lor  \lnot b&lt;/script&gt;

&lt;p&gt;here &lt;em&gt;a&lt;/em&gt; and &lt;em&gt;b&lt;/em&gt; can only assume two values, &lt;em&gt;true&lt;/em&gt; and &lt;em&gt;false&lt;/em&gt;.&lt;/p&gt;

&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;deMorgan&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SBool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SBool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Refl&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Not&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;And&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Or&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;deMorgan&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;STrue&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;STrue&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Refl&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- The first case&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;deMorgan&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;STrue&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SFalse&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Refl&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;deMorgan&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SFalse&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;STrue&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Refl&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;deMorgan&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SFalse&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SFalse&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Refl&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We simply provide an inhabitant to the type based on
pattern matching. This is the same as proving by case analysis.&lt;/p&gt;

&lt;p&gt;To understand what goes on we instantiate the type expression 
in each case. Afterward, the compiler reduces per the semantics
of the &lt;code class=&quot;highlighter-rouge&quot;&gt;Not&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;And&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;Or&lt;/code&gt; type families. In the first case we instantiate
the type expression such that.&lt;/p&gt;

&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;deMorgan&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SBool&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Tru&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SBool&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Tru&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Refl&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Not&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;And&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Tru&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Tru&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Or&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Not&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Tru&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Not&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Tru&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This instantiation is from the value &lt;code class=&quot;highlighter-rouge&quot;&gt;STrue&lt;/code&gt; which has the type &lt;code class=&quot;highlighter-rouge&quot;&gt;SBool Tru&lt;/code&gt;.
The compiler then reduces the expression and derives that
&lt;code class=&quot;highlighter-rouge&quot;&gt;Refl :: Refl Fls Fls&lt;/code&gt;. From the interpreter, we get that.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;*Proof&amp;gt; :t deMorgan STrue STrue
deMorgan STrue STrue :: Refl 'Fls 'Fls
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;induction&quot;&gt;Induction&lt;/h1&gt;
&lt;p&gt;Many interesting properties we want to reason about includes unbound data.
That is, the data we think about is inductively defined. We now go back to the
examples considering natural numbers as they are a good medium for
discussing inductively defined data.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;plus_id_r&lt;/code&gt; is the property that adding zero to
&lt;em&gt;n&lt;/em&gt; on the right side is the identity of &lt;em&gt;n&lt;/em&gt;. &lt;code class=&quot;highlighter-rouge&quot;&gt;plus_id_l&lt;/code&gt; is when we add 0
on the left side.&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;n+0 = n \ \text{(plus_id_r)} \\
    0+n = n \ \text{(plus_id_l)}&lt;/script&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;plus_id_l&lt;/code&gt; is given directly from our definition of addition. But &lt;code class=&quot;highlighter-rouge&quot;&gt;plus_id_r&lt;/code&gt;
needs to be proven, and we can do this inductively using following code.&lt;/p&gt;

&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;plus_id_r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;forall&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SNat&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Refl&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Add&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plus_id_r&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Zero&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Refl&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plus_id_r&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Succ&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gcastWith&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;plus_id_r&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Refl&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The first case is the base case. We know that the value is &lt;code class=&quot;highlighter-rouge&quot;&gt;Zero&lt;/code&gt; and
hence we can derive the type to &lt;code class=&quot;highlighter-rouge&quot;&gt;Z&lt;/code&gt;. It is immediately visible that &lt;code class=&quot;highlighter-rouge&quot;&gt;Refl&lt;/code&gt;
inhabits the type &lt;code class=&quot;highlighter-rouge&quot;&gt;Refl Z  Z&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The next case is the induction case. Here we fold out the value such that if
&lt;code class=&quot;highlighter-rouge&quot;&gt;n = Succ x&lt;/code&gt;, then &lt;code class=&quot;highlighter-rouge&quot;&gt;x = n-1&lt;/code&gt; - we reduce this on our argument. We justify that 
&lt;code class=&quot;highlighter-rouge&quot;&gt;Refl&lt;/code&gt; also is an inhabitant in this case by calling &lt;code class=&quot;highlighter-rouge&quot;&gt;plus_id_r&lt;/code&gt; on the
reduced value.&lt;/p&gt;

&lt;h1 id=&quot;discussion&quot;&gt;Discussion&lt;/h1&gt;
&lt;p&gt;It is indeed possible to prove stuff in Haskell. But it is not further
practical. The reason is in particular because the language
is not designed with
the constructions we need, such as dependent types. We simulate
them through GADTs.&lt;/p&gt;

&lt;p&gt;The closest languages to Haskell that are suited for
this is languages such as Idris and Gallina (Coq). They have all the facilities
needed for incorporating proofs into one’s code.&lt;/p&gt;

&lt;p&gt;If one has a software
development background firmly grounded in OOP (Java, C#), it requires quite
some time to wrap one’s head around the new way to understand types.&lt;/p&gt;

&lt;p&gt;That we can do above is mostly of academic interest: How do make &lt;em&gt;sure&lt;/em&gt; that
certain compilers indeed do what they should do etc. But the techniques are
becoming steadily more accessible to all programmers.&lt;/p&gt;

&lt;p&gt;New languages, like Idris, come with type constructions to formally
reason about our software.&lt;/p&gt;

&lt;h1 id=&quot;final-remarks&quot;&gt;Final Remarks&lt;/h1&gt;
&lt;p&gt;First, thanks to &lt;a href=&quot;http://askarov.net/&quot;&gt;Aslan Askarov&lt;/a&gt; for providing
valuable feedback on this article. It has been incorporated to provide a
more coherent article.&lt;/p&gt;

&lt;p&gt;This article was a precursor for a presentation at a
&lt;a href=&quot;http://www.sparetimeteaching.dk/about.php&quot;&gt;spare time teaching&lt;/a&gt; event
at Aarhus university. Thanks to them for letting me host the presentation.&lt;/p&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:prefix&quot;&gt;
      &lt;p&gt;We solely use prefix notation to simplify the syntax. &lt;a href=&quot;#fnref:prefix&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:compiler&quot;&gt;
      &lt;p&gt;Well, we need to set some compiler flags to make sure that all cases are covered. &lt;a href=&quot;#fnref:compiler&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
        <pubDate>Thu, 27 Oct 2016 00:00:00 +0200</pubDate>
        <link>http://madsbuch.com/blog/proving-stuff-in-haskell/</link>
        <guid isPermaLink="true">http://madsbuch.com/blog/proving-stuff-in-haskell/</guid>
        
        
      </item>
    
      <item>
        <title>100 Days of Fibonacci - Day 11, Fixed Point</title>
        <description>&lt;p&gt;In this article, we will look into encoding the Fibonacci function using the
&lt;code class=&quot;highlighter-rouge&quot;&gt;fix&lt;/code&gt;-point combinator. This is an interesting function as it can be used
to implement general recursion in a programming language.&lt;/p&gt;

&lt;p&gt;To set a context we first need to discuss some programming language
fundamentals: In daily speech, programmers are used to programming
languages being express &lt;em&gt;all possible&lt;/em&gt; computations. This is, they are
&lt;a href=&quot;https://en.wikipedia.org/wiki/Turing_completeness&quot;&gt;Turing complete&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;However, often we want a programming language to support various properties.
Some often discussed properties are
&lt;a href=&quot;https://en.wikipedia.org/wiki/Type_safety&quot;&gt;type safety&lt;/a&gt;, which entails that
programs that compile also runs without errors, and
&lt;a href=&quot;https://en.wikipedia.org/wiki/Normalization_property&quot;&gt;normalization&lt;/a&gt;, which
roughly says we always get a result.&lt;/p&gt;

&lt;p&gt;An often used framework for reasoning about these properties is the
simply typed lambda calculus (STLC) with friends. With the raw STLC,
it is not possible to encode general recursion. Hence we need to add
a friend, which makes it possible.&lt;/p&gt;

&lt;p&gt;This friend could be the fixed point operator.&lt;/p&gt;

&lt;h1 id=&quot;day-11---fix&quot;&gt;Day 11 - Fix&lt;/h1&gt;
&lt;p&gt;Generally, the &lt;code class=&quot;highlighter-rouge&quot;&gt;fix&lt;/code&gt; operator looks as follow:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;y \ f = f \ y \ f&lt;/script&gt;

&lt;p&gt;In this article we let Haskell be our syntactical point of view. This is
because we then will have an interpreter for free.&lt;/p&gt;

&lt;p&gt;In the &lt;code class=&quot;highlighter-rouge&quot;&gt;ghci&lt;/code&gt; interpreter we may define the function as follows:&lt;/p&gt;

&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fix&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We now have a function &lt;code class=&quot;highlighter-rouge&quot;&gt;fix&lt;/code&gt; that takes a function as the argument,
applies it to
itself and returns the result. If the function we apply &lt;code class=&quot;highlighter-rouge&quot;&gt;fix&lt;/code&gt; on returns a
value, then fix will return a value:&lt;/p&gt;

&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fix&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rec&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Hello Fix!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;&quot;Hello fix!&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Next, if we just apply the function on itself we will get an infinite loop:&lt;/p&gt;

&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fix&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rec&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;CInterrupted&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now, this makes sense, as we continuously attempt to apply the lambda function
on itself.&lt;/p&gt;

&lt;p&gt;In above example, we only have a single argument, &lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt;, which is the function
itself. We can say that we have the recursion directly in our hands. But to
be able to do something interesting, like calculating the &lt;em&gt;i&lt;/em&gt;‘th Fibonacci
number, we need to add an argument we can decrement on. First a simple
example.&lt;/p&gt;

&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fix&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rec&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rec&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;55&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In above example we use the &lt;code class=&quot;highlighter-rouge&quot;&gt;if&lt;/code&gt; to return a value when we hit 0, otherwise
we apply the function on &lt;em&gt;n-1&lt;/em&gt;. The expression simply adds all numbers from
0 to 10.&lt;/p&gt;

&lt;p&gt;From here it is straight forward to implement the Fibonacci function. We need
to have a nested if-statement, as we have two base cases. Otherwise, it is very
similar to the function above.&lt;/p&gt;

&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fib&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fix&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rec&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; 
    &lt;span class=&quot;kr&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rec&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rec&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fib&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;55&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;reflections&quot;&gt;Reflections&lt;/h1&gt;
&lt;p&gt;This is a directly recursive implementation of the Fibonacci function. This is
indeed visible from time complexity, and it is not feasible to compute the
Fibonacci number of large numbers. It is indeed possible to augment above
implementation with an accumulator.&lt;/p&gt;

&lt;p&gt;Above implementation is interesting as we completely separate the recursion
from the actual computation. In
&lt;a href=&quot;/blog/100-days-of-fibonacci-day-0-haskell/&quot;&gt;an earlier article&lt;/a&gt;,
I implemented the function in Haskell using normal function syntax. Here the
distinction between the recursion mechanism and the calculating mechanism is
not as distinct.&lt;/p&gt;

&lt;p&gt;The separation is especially interesting when formally reasoning about
programming languages as we can get clutter away. This, however, is much
easier when doing this in dedicated languages.&lt;/p&gt;

&lt;p&gt;Above examples are kind of futile in Haskell, as it already supports better
functionality for solving the Fibonacci function. It is, however, interesting
to think about what a &lt;em&gt;minimal&lt;/em&gt; language for solving the function would be.
In above implementation, we need support for &lt;code class=&quot;highlighter-rouge&quot;&gt;fix&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;if-then-else&lt;/code&gt;, boolean
constructions, and natural numbers. This is four language constructions.&lt;/p&gt;

</description>
        <pubDate>Tue, 11 Oct 2016 00:00:00 +0200</pubDate>
        <link>http://madsbuch.com/blog/100-days-of-fibonacci-day-11-fixed-point/</link>
        <guid isPermaLink="true">http://madsbuch.com/blog/100-days-of-fibonacci-day-11-fixed-point/</guid>
        
        
      </item>
    
      <item>
        <title>On Types for the Eager Language Learner</title>
        <description>&lt;p&gt;Recently I started writing a
&lt;a href=&quot;https://leanpub.com/types-for-the-eager-language-learner&quot;&gt;book on Leanpub&lt;/a&gt;.
This was a first and, frankly, I had
no real idea about what to write about.&lt;/p&gt;

&lt;p&gt;Presently I have spend quite some time studying type systems. That includes
both formal studies and the Haskell type system. I found that after i began
to enjoy increased knowledge about types, I became a much better programmer
in languages like JavaScript, Java, and C#.&lt;/p&gt;

&lt;p&gt;Furthermore I saw that my ventures into new languages was strictly more
successful. It was much easier to learn a new language when I had the
ability to boil everything down to the typing concepts.&lt;/p&gt;

&lt;p&gt;My thinking and research began. I concluded that the type system is
a latent framework for reasoning which is similar across programming
languages. After learning types the link between Java interfaces and
Haskell type classes was a much more coherent unit.&lt;/p&gt;

&lt;p&gt;My initial ventures into types was through a hard path. I spend hours with
Pierces books and numerous papers. The lingo is in most
cases more confusing than
resolving, and it was very hard to link it to any existing knowledge.&lt;/p&gt;

&lt;p&gt;Therefor I decided to write a book that explains type theory for the
programmer who has a strong foundation in languages such as JavaScript
and Java. Programmers who haven’t ventured into Haskell or other
functional programming languages, but really want to consider these languages.&lt;/p&gt;

&lt;h1 id=&quot;the-book&quot;&gt;The Book&lt;/h1&gt;
&lt;p&gt;The book is written using the lean methodology. This means that it will
be gradually published, and that I am very keen on getting feedback all the
time.&lt;/p&gt;

&lt;p&gt;I will publish a chapter when it is initially finished for publishing. That
is when I am content with the writing, have done copy writing and the chapter
is coherent.&lt;/p&gt;

&lt;p&gt;A published chapter is not written in stone. This means that I am more than 
willing to rewrite a chapter when I get good arguments on alternative material.&lt;/p&gt;

&lt;p&gt;As for the pricing I have initially decided that the book will cost 5$ pr.
chapter. This means that the book will increase in value when more chapters
are added. I find this quite fair and it also incentivises to buy the book
early on, which gives me more time to finish it.&lt;/p&gt;

&lt;h1 id=&quot;the-progress&quot;&gt;The Progress&lt;/h1&gt;
&lt;p&gt;Following is my progress on the book. Even this is not written in stone.
So if anybody wants a special chapter, please let me know, and I might
change the curriculum of the book.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Chapters&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Current Status&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Introduction&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Writing&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Basic Types&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Writing&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Intermedio - Appling&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Staging&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Polymorphic Types&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Staging&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Existensial Types&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Staging&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Reference Types&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Staging&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Intermedio - Applying&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Staging&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Sub Typing&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Staging&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;The book is available on 
&lt;a href=&quot;https://leanpub.com/types-for-the-eager-language-learner&quot;&gt;leanpub.com/types-for-the-eager-language-learner&lt;/a&gt;. I appreciate any encouragement.
That does not have to be of monetary art, but just a word that my work is
appreciated.&lt;/p&gt;
</description>
        <pubDate>Sun, 12 Jun 2016 00:00:00 +0200</pubDate>
        <link>http://madsbuch.com/blog/types-for-the-eager-language-learner/</link>
        <guid isPermaLink="true">http://madsbuch.com/blog/types-for-the-eager-language-learner/</guid>
        
        
      </item>
    
      <item>
        <title>Probabilistic Programming - An Overview</title>
        <description>&lt;p&gt;My current academic endeavors are in the field of probabilistic programming. I
will wok this area until roughly June 2017. In the end it should hopefully
translate to a thesis.&lt;/p&gt;

&lt;p&gt;This document is my public working document. It indexes my public writings
about my studies and work while it also provides a structure on what I am
doing.&lt;/p&gt;

&lt;p&gt;If you wan to follow my work there are a couple of ways. I will tweet
on my &lt;a href=&quot;https://twitter.com/madspbuch&quot;&gt;Twitter&lt;/a&gt; every time I release
new articles. So start following me :-) !
Otherwise this page will be updated with any new information. So saving
a link to this post is also an option.&lt;/p&gt;

&lt;p&gt;Another option is to sign up for my mailing list for this project. I will
not spam you, but send a mail from time to time - at maximum bi-weekly.&lt;/p&gt;

&lt;!-- Begin MailChimp Signup Form --&gt;
&lt;link href=&quot;//cdn-images.mailchimp.com/embedcode/horizontal-slim-10_7.css&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot; /&gt;

&lt;style type=&quot;text/css&quot;&gt;
    #mc_embed_signup{background:#fff; clear:left; font:14px Helvetica,Arial,sans-serif; width:100%;}
    /* Add your own MailChimp form style overrides in your site stylesheet or in this style block.
       We recommend moving this block and the preceding CSS link to the HEAD of your HTML file. */
&lt;/style&gt;

&lt;div id=&quot;mc_embed_signup&quot;&gt;
&lt;form action=&quot;//madsbuch.us13.list-manage.com/subscribe/post?u=8d0671561804ecce8e34db3b9&amp;amp;id=586fd816d0&quot; method=&quot;post&quot; id=&quot;mc-embedded-subscribe-form&quot; name=&quot;mc-embedded-subscribe-form&quot; class=&quot;validate&quot; target=&quot;_blank&quot; novalidate=&quot;&quot;&gt;
    &lt;div id=&quot;mc_embed_signup_scroll&quot;&gt;
    &lt;label for=&quot;mce-EMAIL&quot;&gt;Subscribe to our mailing list&lt;/label&gt;
    &lt;input type=&quot;email&quot; value=&quot;&quot; name=&quot;EMAIL&quot; class=&quot;email&quot; id=&quot;mce-EMAIL&quot; placeholder=&quot;email address&quot; required=&quot;&quot; /&gt;
    &lt;!-- real people should not fill this in and expect good things - do not remove this or risk form bot signups--&gt;
    &lt;div style=&quot;position: absolute; left: -5000px;&quot; aria-hidden=&quot;true&quot;&gt;&lt;input type=&quot;text&quot; name=&quot;b_8d0671561804ecce8e34db3b9_586fd816d0&quot; tabindex=&quot;-1&quot; value=&quot;&quot; /&gt;&lt;/div&gt;
    &lt;div class=&quot;clear&quot;&gt;&lt;input type=&quot;submit&quot; value=&quot;Subscribe&quot; name=&quot;subscribe&quot; id=&quot;mc-embedded-subscribe&quot; class=&quot;button&quot; /&gt;&lt;/div&gt;
    &lt;/div&gt;
&lt;/form&gt;
&lt;/div&gt;

&lt;!--End mc_embed_signup--&gt;

&lt;h1 id=&quot;blog-articles&quot;&gt;Blog Articles&lt;/h1&gt;
&lt;p&gt;To develop anything new, we need to know what new is. Here I index studies
on existing systems and concepts.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/the-probability-monad/&quot;&gt;The Probability Monad&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;applications&quot;&gt;Applications&lt;/h1&gt;
&lt;p&gt;Though applications is not strictly an academic necessity, it is kind
of nice. My investigations of practical applications go here.&lt;/p&gt;

&lt;h1 id=&quot;thesis&quot;&gt;Thesis&lt;/h1&gt;
&lt;p&gt;The thesis project is not fully decided yet. When it is, this section is
devoted to linking resources and discussing the progress.&lt;/p&gt;

&lt;h1 id=&quot;log&quot;&gt;Log&lt;/h1&gt;
&lt;p&gt;Following is the log on the project.&lt;/p&gt;
</description>
        <pubDate>Fri, 10 Jun 2016 00:00:00 +0200</pubDate>
        <link>http://madsbuch.com/blog/probabilistic-programming-an-overview/</link>
        <guid isPermaLink="true">http://madsbuch.com/blog/probabilistic-programming-an-overview/</guid>
        
        <category>featured</category>
        
        
        <category>Probabilistic</category>
        
        <category>Programming</category>
        
      </item>
    
      <item>
        <title>A Practical Introduction to Haskell, Part 1</title>
        <description>&lt;!--{ Prerequisites for following along | }--&gt;
&lt;p&gt;This post series provides an introduction to Haskell through a
practical example. It
assumes no prior use of the language or functional programming experience.
A basic understanding of programming, knowledge of using the terminal in Linux,
and knowing how to install the software is, however, expected.&lt;/p&gt;

&lt;!--{ Introduction to the article | grave serious formal }--&gt;
&lt;p&gt;This tutorial will walk you through setting up the environment using
&lt;a href=&quot;http://haskellstack.org&quot;&gt;Haskell Stack&lt;/a&gt;, initializing projects, writing
code, interactively run it, test it, and build / deploy it.&lt;/p&gt;

&lt;!--{ Introduction to the mini project | }--&gt;
&lt;p&gt;As a body of this investigation we are going to develop a little
interpreter. We will be able to do addition, multiplication, subtraction, 
and division on floating point numbers. Interpreters and compilers 
often made in functional programming languages as the paradigm provides
good tools for working with the structure.&lt;/p&gt;

&lt;!--{ Overview of the article | }--&gt;
&lt;p&gt;A lot of material is presented in this talk. The core elements are as
follows:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Motivation. Why even consider functional programming languages?&lt;/li&gt;
  &lt;li&gt;Setting up the environment&lt;/li&gt;
  &lt;li&gt;Functional constructions: Algebraic datatypes and functions&lt;/li&gt;
  &lt;li&gt;Functional way of thinking&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In the next (still unpublished) articles we will cover the rest:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Setting up testing&lt;/li&gt;
  &lt;li&gt;Input/Output&lt;/li&gt;
  &lt;li&gt;Build / Deploying&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Everything will be brief, but luckily it is greatly documented.
So after reading this, if you want to go further, give it away
and search the Internet!&lt;/p&gt;

&lt;h1 id=&quot;why-functional-programming&quot;&gt;Why Functional programming&lt;/h1&gt;
&lt;p&gt;“I already know Java and it provides a well paying job. Why bother
spending time on this?”&lt;/p&gt;

&lt;!--{ Why other paradigms | }--&gt;
&lt;p&gt;It shall not be a secret: There exists many paradigms and even more
ways to solve problems (This is evident from my
&lt;a href=&quot;/blog/100-days-of-fibonacci-overview/&quot;&gt;100 days of Fibonacci&lt;/a&gt;
challenge). None of these methods are right or wrong, but some fit better
in given situations than others.&lt;/p&gt;

&lt;!--{ Better programmer | }--&gt;
&lt;p&gt;My proposition is that people in general become better problem
solvers / programmers by having multiple perspectives on the problem.
This is a key assumption for this presentation and can indeed be opposed.
This is, however, out of scope.&lt;/p&gt;

&lt;!--{ Why functional | }--&gt;
&lt;p&gt;Functional programming is one of the key paradigms. The key benefits of
functional programming are the inherent tools for securing code correctness
and very good tools for architecting applications.
This comes from the use of types. It is furthermore extremely flexible from
natural use of higher order functions. This allows to build powerful 
abstractions that are type safe and still intuitive to use.&lt;/p&gt;

&lt;h1 id=&quot;why-haskell&quot;&gt;Why Haskell&lt;/h1&gt;
&lt;!--{ Introduction to Haskell | }--&gt;
&lt;p&gt;Haskell is a general purpose programming language based in pure
functional programming. By general purpose it is understood that no
specific domains of problems, or industries, are targeted rather than
others. This is evident from its use in everything from webframeworks
to embedded software development for micro processors and high
performance scientific computing.&lt;/p&gt;

&lt;!--{ Flexibility of Haskell | }--&gt;
&lt;p&gt;Haskell has mechanism for making embedded domain specific languages
(EDSL) to target certain tasks. This adds to its flexibility as we
are able to modify the language &lt;em&gt;syntax&lt;/em&gt; to accommodate our needs. This
is useful if one wants to make a framework for a certain industry or
class of problems.&lt;/p&gt;

&lt;!--{ Haskell's community support | }--&gt;
&lt;p&gt;The Haskell repositories are also well equipped. We are going to use
Stackage as we use Stack. Otherwise community packages are usually pulled
from Hackage.&lt;/p&gt;

&lt;!--{ Developer Tool chain for Haskell | }--&gt;
&lt;p&gt;the Haskell ecosystem is being heavily developed at the moment.
Especially the tool chain for writing, testing, and deploying code.
In this post we take offset in Stack. It is a large integrated
tool which depends on the already wide spread cabal. But enough
talking. The first thing to get started is to set up the environment
and get a hold on the first couple of commands.&lt;/p&gt;

&lt;h1 id=&quot;the-environment&quot;&gt;The Environment&lt;/h1&gt;
&lt;!--{ Introduction of Haskell Stack | }--&gt;
&lt;p&gt;As mentioned we use Stack to manage our environment. Stack
automatically downloads and sets up the
right compiler, builds, tests, and makes documentation for the project.
It is also capable of deploying using docker and much more.&lt;/p&gt;

&lt;!--{ Installation of Haskell Stack | }--&gt;
&lt;p&gt;Stack can be installed on all major platform. Instructions are available
on the
&lt;a href=&quot;http://docs.haskellstack.org/en/stable/README/#how-to-install&quot;&gt;website&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;setting-up-a-project&quot;&gt;Setting up a Project&lt;/h2&gt;
&lt;p&gt;Having Stack setup we can know create our project. This is done by the
subcommand &lt;code class=&quot;highlighter-rouge&quot;&gt;new&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;stack new awesomepreter
Downloading template ...
...&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Stack creates a new folder, &lt;code class=&quot;highlighter-rouge&quot;&gt;awesomepreter&lt;/code&gt;, and populates it
with boilerplate code and folders.&lt;/p&gt;

&lt;!--{ post setup instructions |  }--&gt;
&lt;p&gt;After the project was created we are going to make Stack download and setup
the compilers we need. This is done by &lt;code class=&quot;highlighter-rouge&quot;&gt;cd&lt;/code&gt;-ing into the directory and run the sub command &lt;code class=&quot;highlighter-rouge&quot;&gt;setup&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    $ cd awesomepreter
    awesomepreter$ stack setup
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We can now run the interpreter, &lt;code class=&quot;highlighter-rouge&quot;&gt;stack ghci&lt;/code&gt;, and test, &lt;code class=&quot;highlighter-rouge&quot;&gt;stack test&lt;/code&gt;. These
are the only two commands we are using for now.&lt;/p&gt;

&lt;p&gt;We furthermore have 3 folders in the newly created project root.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;app&lt;/code&gt;:  Contains all code related to the execution. This usually includes
code for controlling program flow, reading arguments etc.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;src&lt;/code&gt;:  This folder contains all the business logic.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;test&lt;/code&gt;: All our tests are placed in this folder.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;packages&quot;&gt;Packages&lt;/h2&gt;
&lt;!--{ Introduction to packages |  }--&gt;
&lt;p&gt;We use packages in order to leverage on the work of other talented people.
Nobody want to reinvent the deep plate, so we use others inventions.
Furthermore package systems are also used to organize the code we write.
For this organizations might setup their own package management systems.&lt;/p&gt;

&lt;!--{ What we use | }--&gt;
&lt;p&gt;For this project we only use a few packages in order to test our code.
We use &lt;em&gt;HUnit&lt;/em&gt; and some supporting packages.&lt;/p&gt;

&lt;!--{ How to add packages | }--&gt;
&lt;p&gt;The packages we need are added by including following in the
&lt;code class=&quot;highlighter-rouge&quot;&gt;awesomepreter.cabal&lt;/code&gt; file. It has to be added to &lt;code class=&quot;highlighter-rouge&quot;&gt;build-depends&lt;/code&gt; under the
&lt;code class=&quot;highlighter-rouge&quot;&gt;test-suite awesomepreter-test&lt;/code&gt; section as it is where we use it.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    , HUnit
    , testpack
    , test-framework
    , test-framework-hunit
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;!--{ How to apply the changes | }--&gt;
&lt;p&gt;For the changes to apply to our project we need to ask stack to solve 
dependencies. This is a rather easy process done with a single command.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    awesomepreter$ stack solver --update-config
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;From here the packages are available in our test part of the project. But
before we will start using these packages we will start implementing the
interpreter.&lt;/p&gt;

&lt;h1 id=&quot;functional-constructs&quot;&gt;Functional Constructs&lt;/h1&gt;
&lt;!--{ We start coding | }--&gt;
&lt;p&gt;Now the environment is set up for our purposes, and we will return to some
some programming discussing. For this section we will turn our attention
on the &lt;code class=&quot;highlighter-rouge&quot;&gt;src&lt;/code&gt; folder, which contains the primary part of our program.&lt;/p&gt;

&lt;!--{ Cleanup preparations | }--&gt;
&lt;p&gt;First thing: A bit of cleanup. In the file &lt;code class=&quot;highlighter-rouge&quot;&gt;src/Lib.hs&lt;/code&gt; we remove the
string &lt;code class=&quot;highlighter-rouge&quot;&gt;(someFunc)&lt;/code&gt; from the beginning so it says &lt;code class=&quot;highlighter-rouge&quot;&gt;module Lib where&lt;/code&gt;.
This is because we don’t want to consider the module system at present
time.&lt;/p&gt;

&lt;!--{ Recap on the project we are implementing | }--&gt;
&lt;p&gt;We can now continue on with the project: We wanted to build an interpreter
that interprets expressions like &lt;code class=&quot;highlighter-rouge&quot;&gt;2 + 5&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;3 + 7 / 8&lt;/code&gt;. To do this
we consider
how to model the problem, and how evaluate instances of that model to a
result. In functional programming we model such things in algebraic
datatypes (ADT) and implement the evaluation as functions on that datatype.&lt;/p&gt;

&lt;h2 id=&quot;algebraic-datatypes&quot;&gt;Algebraic Datatypes&lt;/h2&gt;
&lt;!--{ How we interpret ADT in this project | }--&gt;
&lt;p&gt;In this project we see an ADT as a construction which takes an &lt;em&gt;operation&lt;/em&gt;
(the constructor) and some associated data. For the above example, &lt;code class=&quot;highlighter-rouge&quot;&gt;2 + 5&lt;/code&gt;,
the operation is addition and the data is 2 and 5. Hence we make an addition
constructor taking the two number: &lt;code class=&quot;highlighter-rouge&quot;&gt;Add 2 5&lt;/code&gt;.&lt;/p&gt;

&lt;!--{ Arbitrarily nesting | }--&gt;
&lt;p&gt;Above is not the whole story as we need to satisfy out types. We want to
be able to build nested expressions, something like &lt;code class=&quot;highlighter-rouge&quot;&gt;Add 2 (Add 2 3)&lt;/code&gt;. But
as the number, 2 and 3, have the type &lt;code class=&quot;highlighter-rouge&quot;&gt;Int&lt;/code&gt; and Add has some other type this
is not possible. To get around this we make a constructor which just hold
the number: &lt;code class=&quot;highlighter-rouge&quot;&gt;Lit 4&lt;/code&gt;. This is also an inhabitant of the same type as &lt;code class=&quot;highlighter-rouge&quot;&gt;Add&lt;/code&gt;.&lt;/p&gt;

&lt;!--{ This is done through ADTs | }--&gt;
&lt;p&gt;Haskell has ADTs through the &lt;code class=&quot;highlighter-rouge&quot;&gt;data&lt;/code&gt; construction. Such a thing consists
of a type deceleration and a number of constructors each with some
associated data.&lt;/p&gt;

&lt;!--{ Haskell implementation | }--&gt;
&lt;p&gt;We implement this in the &lt;code class=&quot;highlighter-rouge&quot;&gt;src/Lib.hs&lt;/code&gt; file. First we change the module
signature to &lt;code class=&quot;highlighter-rouge&quot;&gt;module Lib where&lt;/code&gt; and then we append the following lines
of code to the file.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span class=&quot;kr&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ALang&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;Lit&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Float&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Add&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ALang&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ALang&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Mul&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ALang&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ALang&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Sub&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ALang&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ALang&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Div&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ALang&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ALang&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;deriving&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Show&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Then open the interpreter by issuing &lt;code class=&quot;highlighter-rouge&quot;&gt;stack ghci&lt;/code&gt; from the project root.&lt;/p&gt;

&lt;p&gt;After a bit of compiling a prompt should be visible and ready to take input&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;awesomepreter&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;stack ghci
...
Ok, modules loaded: Lib, Main.
&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;Main Lib&amp;gt; &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Here we can write &lt;code class=&quot;highlighter-rouge&quot;&gt;Lit 42&lt;/code&gt; for which we will see the evaluated result
&lt;code class=&quot;highlighter-rouge&quot;&gt;Lit 42.0&lt;/code&gt;. Haskell did automatic conversion to floats, hence the trailing
0.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;deriving Show&lt;/strong&gt; we added in the end of the declaration makes Haskell
figure out how to show instances of this data type itself.&lt;/p&gt;

&lt;h2 id=&quot;functions&quot;&gt;Functions&lt;/h2&gt;
&lt;p&gt;To perform the actual interpretation of the expression we need to implement
a function. We want a function that takes an expression as input, and emits
the result as output.&lt;/p&gt;

&lt;!--{ Pattern matching | }--&gt;
&lt;p&gt;The first construction we hit when defining functions for algebraic
datatypes is &lt;strong&gt;pattern matching&lt;/strong&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span class=&quot;n&quot;&gt;awesomepret&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Lit&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;!--{Why pattern matching | }--&gt;
&lt;p&gt;Pattern matching is used to two things: Unpacking datatypes and making
specialized functions for each case in the datatype, and providing a way
to unpack data from constructors. The above
case is the simplest case, where we simply remove the constructor
and return the contents.&lt;/p&gt;

&lt;!--{ Recursion as iteration | }--&gt;
&lt;p&gt;In pure functional programming &lt;strong&gt;recursion&lt;/strong&gt; is how we provide iteration.
Where we are normally used to have a language construction to provide this
functionality, we here implement it on our value-level functions&lt;/p&gt;

&lt;p&gt;The this case we have a concrete tree. Each node is an operation and
the leaves are literals. By recursion we aggregate this tree
into a single value by using the build-in
operations form Haskell.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span class=&quot;n&quot;&gt;awesomepret&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Add&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;awesomepret&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;awesomepret&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Th make the expressions easier to use, we can use a &lt;strong&gt;let .. in ..&lt;/strong&gt; expression
to make intermediate values. This makes big expressions easier to read and
write.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span class=&quot;n&quot;&gt;awesomepret&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Mul&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;let&lt;/span&gt;
                            &lt;span class=&quot;n&quot;&gt;ae&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;awesomepret&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;
                            &lt;span class=&quot;n&quot;&gt;be&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;awesomepret&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;
                          &lt;span class=&quot;kr&quot;&gt;in&lt;/span&gt;
                             &lt;span class=&quot;n&quot;&gt;ae&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;be&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This naturally leads to the &lt;strong&gt;where&lt;/strong&gt;-expression. For our purpose this
is also an organizational tool. It makes the code easier to read.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span class=&quot;n&quot;&gt;awesomepret&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Sub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ae&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;be&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ae&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;awesomepret&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;be&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;awesomepret&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Often we need to do something different based on the value of a variable.
In this case we need to check if we divide by 0, and throw an exception if
we do so. In Haskell we can use &lt;strong&gt;guards&lt;/strong&gt; for this. This is strictly more elegant than in-lining an &lt;em&gt;if-then-else&lt;/em&gt; expression.&lt;/p&gt;

&lt;p&gt;In our case we don’t want to allow devision by 0:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span class=&quot;n&quot;&gt;awesomepret&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Div&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
               &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;awesomepret&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;ne&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Division by 0&quot;&lt;/span&gt;
               &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;otherwise&lt;/span&gt;               &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;awesomepret&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;awesomepret&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We now have a working interpreter we can use from the Haskell REPL.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;awesomepreter$ stack ghci 
...
*Main Lib&amp;gt; awesomepret (Add (Lit 5) (Lit 2))
7.0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;the-functional-way-of-thinking&quot;&gt;The Functional Way of Thinking&lt;/h1&gt;
&lt;p&gt;We  now have a working piece of code, and we can try to dissect it to
figure out how we reasoned to get to this result.&lt;/p&gt;

&lt;p&gt;The data we worked on was organized as a tree. In pure functional programming
everything are trees. Even the program we express is a tree. When executing
the program these trees are reduced as much as possible. This new tree, 
often just a singly value, is the result of the computation.&lt;/p&gt;

&lt;p&gt;We also see that we have no language constructions. Everything can be put in
variables and passed around. This provides a high degree of flexibility. We
have tools for expressing powerful abstractions, but also to make completely
unreadable code.&lt;/p&gt;

&lt;h2 id=&quot;to-imperative-languages&quot;&gt;To Imperative Languages&lt;/h2&gt;
&lt;p&gt;Coming from an imperative language there are some main differences one should
have in mind.&lt;/p&gt;

&lt;p&gt;There are &lt;strong&gt;no sequential&lt;/strong&gt; ordering of expressions. In pure functional
programming we solely have functions. When we are not able to reduce a
function expression any further, we have our result. And yes, the result
is a function. To get greater insight in this the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Lambda_calculus&quot;&gt;Lambda Calculus&lt;/a&gt; is a
good starting point.&lt;/p&gt;

&lt;p&gt;We also have a whole new vocabulary about functions:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Higher order function:&lt;/strong&gt; Functions can be provided as arguments and
returned from functions.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;First class citizen:&lt;/strong&gt; Functions are passed around in variables like
ordinary values.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Partial Functions:&lt;/strong&gt; In the case of Haskell it means that a function does
not pattern match on all cases of the datatype.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This vocabulary is also available to mainstream programming languages such
as Java, C#, etc. But they are central to functional programming.&lt;/p&gt;

&lt;p&gt;The last difference to imperative programming is the lack of control
structures. That’s right, we don’t have any &lt;code class=&quot;highlighter-rouge&quot;&gt;while&lt;/code&gt;-loops,
&lt;code class=&quot;highlighter-rouge&quot;&gt;if&lt;/code&gt;-expression, etc. But fear not. We can express the same computation
in functional programming. For the iteration idioms we use recursion
and for the conditionals we use pattern matching.&lt;/p&gt;

&lt;h2 id=&quot;what-i-want-vs-what-to-do&quot;&gt;What I want vs. What to do&lt;/h2&gt;
&lt;p&gt;When doing imperative programming we have an explicit &lt;em&gt;state&lt;/em&gt;. This state
is concrete variables. When performing computation we modify the state
in a linear fashion. We might concatenate a couple of strings and add
some numbers. In the end we return either a value, a pointer to the
data we made, or nothing. The last case assumes that we did some effect
full programming and that we are able to read the results from somewhere
else. This is not how we do when thinking functional programming.&lt;/p&gt;

&lt;p&gt;In functional programming we think about what we have and what we want.
These objects are reasoned about as inhabitants of a type. A type is here 
understood as set of elements.&lt;/p&gt;

&lt;p&gt;A function is a map from one type to another. A whole program is understood
as a map from some initial element of a given type, to another. This map,
or function, is in Haskell called &lt;code class=&quot;highlighter-rouge&quot;&gt;main&lt;/code&gt;.&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;We have enough to formulate simple expressions and evaluate them in the
interpreter. Next thing, for practical Haskell programs, is to set up
automated testing. This is to allow great flexibility in software development.
After that we also need to think about how users can access the
functionality we have build. So we look into deploying.&lt;/p&gt;

</description>
        <pubDate>Fri, 08 Apr 2016 00:00:00 +0200</pubDate>
        <link>http://madsbuch.com/blog/a-practical-introduction-to-haskell-part-1/</link>
        <guid isPermaLink="true">http://madsbuch.com/blog/a-practical-introduction-to-haskell-part-1/</guid>
        
        
      </item>
    
      <item>
        <title>100 Days of Fibonacci - Day 10, Python</title>
        <description>&lt;!--{ Introduction to the project | light informal fun }--&gt;
&lt;p&gt;It is yet another time for a post in my
&lt;a href=&quot;/blog/100-days-of-fibonacci-overview&quot;&gt;100 days of Fibonacci&lt;/a&gt; challenge.
Today I am containing myself a bit and provide a link between
a concept in programming and its root in mathematics.&lt;/p&gt;

&lt;!--{ Introduction to Python | light informal }--&gt;
&lt;p&gt;The concept is list comprehension in Python. Python is a widely
used programming language especially used as an easy language
appropriate for beginners. The languages is in particular
close to English. Furthermore it enforces good style by scoping by indentation.&lt;/p&gt;

&lt;!--{ My take on Fibonacci in python | light informal}--&gt;
&lt;p&gt;As mentioned I zoom in on the list comprehension feature in
Python. I relate this feature with the way sets are defined in
math. Lastly I talk a bit about the interpretation of infinite sets in
programming.&lt;/p&gt;

&lt;!--{ Implementation details of Fibonacci in Python | technical formal }--&gt;

&lt;h1 id=&quot;fibonacci-in-python&quot;&gt;Fibonacci in Python&lt;/h1&gt;
&lt;!--{ Overview on the Python implementation | }--&gt;
&lt;p&gt;The implementation is the direct recursive implementation accompanied
by dynamic programming by momoization. This as
my &lt;a href=&quot;/blog/100-days-of-fibonacci-day-2-java/&quot;&gt;Java&lt;/a&gt; implementation. It is not
new to implement it like this, and simply provides a predicate to use in
the list comprehension.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cs&quot; data-lang=&quot;cs&quot;&gt;&lt;span class=&quot;n&quot;&gt;cache&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fib&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;None&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fib&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fib&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;!--{ Justification of the cache | }--&gt;
&lt;p&gt;The cache is here used as a global variable. Global variables are something one
should by all means avoid, but here the amount of code is small and the main
goal of this post is not software architecture.&lt;/p&gt;

&lt;!--{ Transition to the list comprehension formulation |  }--&gt;
&lt;p&gt;From here we can know create the list of the 20 first Fibonacci numbers using
list comprehension in Python. We print it directly to provide an output.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cs&quot; data-lang=&quot;cs&quot;&gt;&lt;span class=&quot;n&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fib&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This is a one-liner for mapping the list of numbers from 0 to 19 to the list
their corresponding Fibonacci numbers.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;python fib.py 
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ..., 4181]&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The implementation is available from my supporting
&lt;a href=&quot;https://github.com/madsbuch/fibonacci/tree/master/python&quot;&gt;Git repository&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&quot;list-comprehension&quot;&gt;List Comprehension&lt;/h1&gt;
&lt;!--{ Set initial intuition in a for loop | }--&gt;
&lt;p&gt;The notation used above looks mostly like a very compact &lt;code class=&quot;highlighter-rouge&quot;&gt;for&lt;/code&gt;-loop. For this
relation to work we need to slightly open up our understanding of lists and
iteration in programming languages.&lt;/p&gt;

&lt;!--{ The new understanding of lists | }--&gt;
&lt;p&gt;First we need to view a list as a set. It should be quite clear that a list
indeed can be a set. For that to work we need operations like &lt;em&gt;intersection&lt;/em&gt;,
&lt;em&gt;union&lt;/em&gt;, &lt;em&gt;difference&lt;/em&gt;, etc. Any programmer should be able to quickly implement
those. The contrary, that lists are sets, are not given. Lists are inherently
ordered, where sets are unordered.&lt;/p&gt;

&lt;!--{ New understanding of iteration | }--&gt;
&lt;p&gt;The other thing is the &lt;code class=&quot;highlighter-rouge&quot;&gt;for&lt;/code&gt;-loop. &lt;code class=&quot;highlighter-rouge&quot;&gt;for&lt;/code&gt;-loops are usually viewed as iterating
all elements in a list one-by-one, and doing something to them. Instead we 
can see it as quantification. For a second we should forget everything about
the order of the list and details about iterations, and just see it as we 
perform an operation on every single element in the &lt;em&gt;set&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;We now have the mindset set for the following mathematical interpretation of
the above list comprehension to work. The following is a direct translation.&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\{ \ fib(x) \ | \ x \in \{0, 1, 2, 3, 4, 5, ..., 19\} \ \}&lt;/script&gt;

&lt;p&gt;which would usually be written as follows.&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\{ \ fib(x) \ | \ x \in \mathbb{N} \ \}&lt;/script&gt;

&lt;p&gt;The reason why the last formulation is kind of futile is that Python
uses strict evaluation: All terms are evaluated. The set of naturals is
infinite and hence the computation will not halt.&lt;/p&gt;

&lt;p&gt;The last formulation is, however, possible to formulate in programming.
We just need a lazy evaluated language. As such we can formulate it, and use
it, in the Haskell programming language. Following works given an
implementation of the &lt;code class=&quot;highlighter-rouge&quot;&gt;fib&lt;/code&gt; function:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fib&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And what is all this worth? Well, a lot of material programmers have to
implement was first formulated in a mathematical language. This relations seeks
the demystify the relation between programming and math. In fact it can (and
is / will be in other posts) be argued that math and programming is in fact
the same thing. But for some reason the two areas are somewhat disjoint. This,
in my opinion, largely because of two cultures in communicating.&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;
&lt;!--{ Fibonacci was implemented | }--&gt;
&lt;p&gt;In this post i implemented Fibonacci in python. There is nothing new to
the implementation. It was a directly recursive implementation supported
by a cache for speed.&lt;/p&gt;

&lt;!--{ Conclusion of list comprehension | }--&gt;
&lt;p&gt;The concept elaborated in this post is list comprehension and its relationship
the the mathematical formulation of sets. Ultimately my message is that we as
programmers should be able to both formulate and interpret in other frameworks.
Also those seemingly very distant frameworks, like mathematics is for
many programmers.&lt;/p&gt;
</description>
        <pubDate>Sat, 20 Feb 2016 00:00:00 +0100</pubDate>
        <link>http://madsbuch.com/blog/100-days-of-fibonacci-day-10-python/</link>
        <guid isPermaLink="true">http://madsbuch.com/blog/100-days-of-fibonacci-day-10-python/</guid>
        
        
      </item>
    
      <item>
        <title>100 Days of Fibonacci - Day 9, Haskell Types</title>
        <description>&lt;p&gt;Haskell has a flexible type system. It actually is Turing complete
given the right language extensions. This also means that we can do
arbitrary computations, which we are going to exploit in this 10th 
day in my &lt;a href=&quot;/blog/100-days-of-fibonacci-overview/&quot;&gt;100 days of Fibonacci&lt;/a&gt;
challenge.&lt;/p&gt;

&lt;p&gt;I already did &lt;a href=&quot;/blog/100-days-of-fibonacci-day-0-haskell/&quot;&gt;look at Haskell&lt;/a&gt;.
So strictly speaking I should choose another language.
However, I find that programming in Haskell’s type system is different
enough that I will consider it a different language.&lt;/p&gt;

&lt;h1 id=&quot;day-9---haskell-types&quot;&gt;Day 9 - Haskell Types&lt;/h1&gt;
&lt;p&gt;Today I implemented Fibonacci in the Haskell type system. That means that I
can get the Haskell compiler to generate a &lt;em&gt;type&lt;/em&gt; for the &lt;em&gt;n&lt;/em&gt;‘th
Fibonacci number.&lt;/p&gt;

&lt;p&gt;I first created a datatype for representing naturals.
The approach as in the last part of the
&lt;a href=&quot;/blog/100-days-of-fibonacci-day-4-prolog/&quot;&gt;Prolog implementation&lt;/a&gt; and
use used in &lt;a href=&quot;/blog/100-days-of-fibonacci-day-7-coq/&quot;&gt;Coq&lt;/a&gt; was used.
This representation
builds on the &lt;a href=&quot;https://en.wikipedia.org/wiki/Peano_axioms&quot;&gt;Peano axioms&lt;/a&gt;
and is straight forward to implement.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt; 
&lt;span class=&quot;kr&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Nat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Z&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;S&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Nat&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This datatype is usable as a &lt;a href=&quot;https://wiki.haskell.org/Kind&quot;&gt;kind&lt;/a&gt;
because we use the language extension &lt;em&gt;DataKinds&lt;/em&gt;. A kind can be
thought of as a type of a type.&lt;/p&gt;

&lt;p&gt;In &lt;code class=&quot;highlighter-rouge&quot;&gt;ghci&lt;/code&gt; we can inspect the kind of the type constructor &lt;code class=&quot;highlighter-rouge&quot;&gt;Z&lt;/code&gt; by issuing
&lt;code class=&quot;highlighter-rouge&quot;&gt;:kind Z&lt;/code&gt;. The result returned is &lt;code class=&quot;highlighter-rouge&quot;&gt;Z :: Nat&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Next I implemented addition. In Haskell we use the
language extension &lt;em&gt;TypeFamilies&lt;/em&gt; to have a mechanism for implementing
type level functions.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt; 
&lt;span class=&quot;kr&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;family&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Add&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Nat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Nat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Nat&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Add&lt;/span&gt;  &lt;span class=&quot;kt&quot;&gt;Z&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Add&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;S&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;S&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Add&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Again we can try to inspect the kind of the type level function:
&lt;code class=&quot;highlighter-rouge&quot;&gt;:kind Add (S Z) (S Z)&lt;/code&gt; which yields &lt;code class=&quot;highlighter-rouge&quot;&gt;Add (S Z) (S Z) :: Nat&lt;/code&gt; as
expected.&lt;/p&gt;

&lt;p&gt;To actually calculate the Fibonacci type we need Haskell to reduce the &lt;code class=&quot;highlighter-rouge&quot;&gt;Add&lt;/code&gt;
expression. This is done using the &lt;code class=&quot;highlighter-rouge&quot;&gt;:kind! Add (S Z) (S Z)&lt;/code&gt; operation.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt; 
&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;FibType&amp;gt; :kind! Add &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;S Z&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;S Z&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
Add &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;S Z&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;S Z&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; :: Nat
&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'S ('&lt;/span&gt;S &lt;span class=&quot;s1&quot;&gt;'Z)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We can now both define type level datatypes (kinds) and do operations on these.
Along this line I implemented Fibonacci straight forward in direct recursion.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt; 
&lt;span class=&quot;kr&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;family&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Fibonacci&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Nat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Nat&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Fibonacci&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Z&lt;/span&gt;           &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Z&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Fibonacci&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;S&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;       &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;S&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Fibonacci&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;S&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;S&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Add&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Fibonacci&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Fibonacci&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;S&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;To implement above type family I had to add the language extension
&lt;em&gt;UndecidableInstances&lt;/em&gt;. This is because of the use of the &lt;code class=&quot;highlighter-rouge&quot;&gt;Add&lt;/code&gt; type
family in the &lt;code class=&quot;highlighter-rouge&quot;&gt;Fibonacci&lt;/code&gt; type family.&lt;/p&gt;

&lt;p&gt;In this example, however, it is easy to see that the type family will
always converge. &lt;code class=&quot;highlighter-rouge&quot;&gt;Add&lt;/code&gt; converges (and does not need
&lt;em&gt;UndecidableInstances&lt;/em&gt;) and &lt;code class=&quot;highlighter-rouge&quot;&gt;Fibonacci&lt;/code&gt; converges as the arguments
to the recursive applications are decreasing.&lt;/p&gt;

&lt;p&gt;The last thing is to actually calculate Fibonacci. This can be done by
issuing the &lt;code class=&quot;highlighter-rouge&quot;&gt;:kind!&lt;/code&gt; as earlier on and read the result. The returned
value is not easily readable but it is 13 as expected.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ghci FibType.hs &lt;span class=&quot;nt&quot;&gt;-XDataKinds&lt;/span&gt;
...
&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;FibType&amp;gt; :kind! Fibonacci &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;S &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;S &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;S &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;S &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;S &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;S &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;S Z&lt;span class=&quot;o&quot;&gt;)))))))&lt;/span&gt;
Fibonacci &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;S &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;S &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;S &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;S &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;S &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;S &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;S Z&lt;span class=&quot;o&quot;&gt;)))))))&lt;/span&gt; :: Nat
&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'S ('&lt;/span&gt;S &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'S ('&lt;/span&gt;S &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'S ('&lt;/span&gt;S &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'S ('&lt;/span&gt;S &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'S ('&lt;/span&gt;S &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'S ('&lt;/span&gt;S &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'S '&lt;/span&gt;Z&lt;span class=&quot;o&quot;&gt;))))))))))))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The code is as usual available on
&lt;a href=&quot;https://github.com/madsbuch/fibonacci/tree/master/haskell&quot;&gt;Github&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Types alone does, however, not make a program. We need some kind of value
level implementation. In the next section I make a similar implementation
of the type level functions on the value level. Coupling the type and the
value in an one-to-one correspondence yields
&lt;a href=&quot;https://wiki.haskell.org/Dependent_type&quot;&gt;dependent programming&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Dependent types are used to statically reason about programs and
put up guarantees that can be checked on compile time.
In this case we can set up the guarantee
that the code &lt;em&gt;actually&lt;/em&gt; calculates the &lt;em&gt;n&lt;/em&gt;‘th Fibonacci number.&lt;/p&gt;

&lt;h2 id=&quot;implementing-dependent-typing&quot;&gt;Implementing Dependent Typing&lt;/h2&gt;
&lt;p&gt;With dependent typing the type of a term &lt;em&gt;depends&lt;/em&gt; on its value. In
Haskell we can benefit from making some parts of the types dependent.
This could for example be statically sized lists to make
matrix operations type-safe.&lt;/p&gt;

&lt;p&gt;In this post I implement complete dependency between terms and their type.
The type for the Fibonacci term was implemented above. Now we just need to
write some code that couples it to the value level.&lt;/p&gt;

&lt;p&gt;First we couple the datatype. I implemented a value level datatype,
&lt;code class=&quot;highlighter-rouge&quot;&gt;SNat&lt;/code&gt;, which embeds its size.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt; 
&lt;span class=&quot;kr&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SNat&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Nat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;SZ&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SNat&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Z&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;SS&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SNat&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SNat&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;S&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In the above the value level constructor has the type &lt;code class=&quot;highlighter-rouge&quot;&gt;SNat Z&lt;/code&gt;. From
this type alone, we can read that it is the &lt;em&gt;zero&lt;/em&gt; element.&lt;/p&gt;

&lt;p&gt;The successor value constructor has the type &lt;code class=&quot;highlighter-rouge&quot;&gt;SNat n -&amp;gt; SNat (S n)&lt;/code&gt;.
Here the type is constructed depending on which number element we
construct.&lt;/p&gt;

&lt;p&gt;An important property of above datatype is the bijection between
a datatype and its type. This is what we use to statically reason about
our programs and make sure certain guarantees are held.&lt;/p&gt;

&lt;p&gt;After that we implement the addition function&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt; 
&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SNat&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SNat&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SNat&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Add&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SZ&lt;/span&gt;      &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;SS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SS&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The value level add function stays completely true to the type-level
add function and is together with the Fibonacci function below fairly
self explanatory.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt; 
&lt;span class=&quot;n&quot;&gt;fibonacci&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SNat&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SNat&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Fibonacci&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;fibonacci&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SZ&lt;/span&gt;            &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SZ&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;fibonacci&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;SS&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SZ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;       &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;SS&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SZ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;fibonacci&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;SS&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;SS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fibonacci&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fibonacci&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;SS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We now build a Fibonacci function where the returned value is bijective
to its type. Hence we are sure that what is computed at runtime is something
we can predict on compile time.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt; 
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ghci &lt;span class=&quot;nt&quot;&gt;-XDataKinds&lt;/span&gt; FibType.hs 
...
&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;FibType&amp;gt; &lt;span class=&quot;nb&quot;&gt;let &lt;/span&gt;f &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; fibonacci &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;SS &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;SS &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;SS &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;SS &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;SS &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;SS &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;SS &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;SZ
&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;FibType&amp;gt; :t f
f :: SNat
       &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'S ('&lt;/span&gt;S &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'S ('&lt;/span&gt;S &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'S ('&lt;/span&gt;S &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'S ('&lt;/span&gt;S &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'S ('&lt;/span&gt;S &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'S ('&lt;/span&gt;S &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'S '&lt;/span&gt;Z&lt;span class=&quot;o&quot;&gt;)))))))))))))&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;FibType&amp;gt; f
13&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;As expected the type of the term &lt;em&gt;fibonacci 7&lt;/em&gt; has the type 13 (translated
from the unary representation to decimal). After evaluating the term we also
get the value &lt;em&gt;13&lt;/em&gt;.&lt;/p&gt;

&lt;h1 id=&quot;applications-for-dependent-programming&quot;&gt;Applications for Dependent Programming&lt;/h1&gt;
&lt;p&gt;All above is perfectly good. But why bother writing so much more code
to just have a dependency between the value and its type? Well, for most
applications this is not necessary, but the technique can be used to set
strict guarantees in certain situations.&lt;/p&gt;

&lt;p&gt;When you know the shape of the data-types on compile-time it can be
advantageous to model this shape into the program. This could be
some uses of matrices.&lt;/p&gt;

&lt;p&gt;When implementing for example neural networks, the upper bound on
the topology is usually known when writing the code. In this case
one could use type safe matrix libraries to implement this functionality.&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;In this post I first implemented the Fibonacci function on the type level.
I made a type for the &lt;em&gt;n&lt;/em&gt;‘th element in the Fibonacci series. This was
done through data kinds and type families.&lt;/p&gt;

&lt;p&gt;After this a value level implementation was implemented. It was implemented
in such a way that its type was bijective to its return value.&lt;/p&gt;

&lt;p&gt;The dependency between the terms and the types was carried out through
GADTs which allows us to encode the type level natural in the types for
the values.&lt;/p&gt;

</description>
        <pubDate>Fri, 29 Jan 2016 00:00:00 +0100</pubDate>
        <link>http://madsbuch.com/blog/100-days-of-fibonacci-day-9-haskell-types/</link>
        <guid isPermaLink="true">http://madsbuch.com/blog/100-days-of-fibonacci-day-9-haskell-types/</guid>
        
        
      </item>
    
      <item>
        <title>100 Days of Fibonacci - Day 8, R</title>
        <description>&lt;p&gt;I looked at quite some
&lt;a href=&quot;/blog/100-days-of-fibonacci-overview/&quot;&gt;different approaches to the Fibonacci function&lt;/a&gt;,
and I start to wonder how the Fibonacci number develops with respect
to its index. To look into this I want to make a 2D plot where the X-axis is
the natural numbers and the Y-axis is the corresponding Fibonacci numbers.&lt;/p&gt;

&lt;p&gt;To solve this problem I decided to use R. This is less of an obvious
solution. Usually one would probably have gone for a spreadsheet, but
&lt;a href=&quot;/blog/100-days-of-fibonacci-day-5-spreadsheet/&quot;&gt;already did that&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;R is a good tool for doing numeric analysis and prototyping algorithms
for machine learning. For that it provides good tools for visualizing
data. This is what I am going to elaborate a bit on here.&lt;/p&gt;

&lt;h1 id=&quot;day-8---r&quot;&gt;Day 8 - R&lt;/h1&gt;
&lt;p&gt;Usually I would have started implementing Fibonacci as a recursive
function. This was also my first approach and it is certainly
possible. It is, however, not the idiomatic way. R is an array oriented
language and as such we work on arrays. Under this paradigm it is better
to initialize an array, and then populate it with its elements.&lt;/p&gt;

&lt;p&gt;The implementation takes offset in a function that takes &lt;em&gt;n&lt;/em&gt; as
input and returns a list of the &lt;em&gt;n&lt;/em&gt; first Fibonacci numbers.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-r&quot; data-lang=&quot;r&quot;&gt;&lt;span class=&quot;n&quot;&gt;fibList&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;theList&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numeric&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;theList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;theList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;theList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;theList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;-1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;theList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;-2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;theList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# Calling the function&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fibList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fibList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fibList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;It was run using the &lt;code class=&quot;highlighter-rouge&quot;&gt;Rscript&lt;/code&gt; command&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;mads@mads:fibonacci&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;Rscript fib.R 
 &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;1]  1  1  2  3  5  8 13 21 34 55
 &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;1]    1    1    2    3    5    8   13   21   34   55   89  144  233  377  610
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;16]  987 1597 2584 4181 6765
  &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;1] 1.000000e+00 1.000000e+00 2.000000e+00 3.000000e+00 5.000000e+00
  &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;6] 8.000000e+00 1.300000e+01 2.100000e+01 3.400000e+01 5.500000e+01
 &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;11] 8.900000e+01 1.440000e+02 2.330000e+02 3.770000e+02 6.100000e+02
 &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;16] 9.870000e+02 1.597000e+03 2.584000e+03 4.181000e+03 6.765000e+03
 &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;21] 1.094600e+04 1.771100e+04 2.865700e+04 4.636800e+04 7.502500e+04
 &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;26] 1.213930e+05 1.964180e+05 3.178110e+05 5.142290e+05 8.320400e+05
 &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;31] 1.346269e+06 2.178309e+06 3.524578e+06 5.702887e+06 9.227465e+06
 &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;36] 1.493035e+07 2.415782e+07 3.908817e+07 6.324599e+07 1.023342e+08
 &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;41] 1.655801e+08 2.679143e+08 4.334944e+08 7.014087e+08 1.134903e+09
 &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;46] 1.836312e+09 2.971215e+09 4.807527e+09 7.778742e+09 1.258627e+10
 &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;51] 2.036501e+10 3.295128e+10 5.331629e+10 8.626757e+10 1.395839e+11
 &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;56] 2.258514e+11 3.654353e+11 5.912867e+11 9.567220e+11 1.548009e+12
 &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;61] 2.504731e+12 4.052740e+12 6.557470e+12 1.061021e+13 1.716768e+13
 &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;66] 2.777789e+13 4.494557e+13 7.272346e+13 1.176690e+14 1.903925e+14
 &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;71] 3.080615e+14 4.984540e+14 8.065155e+14 1.304970e+15 2.111485e+15
 &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;76] 3.416455e+15 5.527940e+15 8.944394e+15 1.447233e+16 2.341673e+16
 &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;81] 3.788906e+16 6.130579e+16 9.919485e+16 1.605006e+17 2.596955e+17
 &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;86] 4.201961e+17 6.798916e+17 1.100088e+18 1.779979e+18 2.880067e+18
 &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;91] 4.660047e+18 7.540114e+18 1.220016e+19 1.974027e+19 3.194043e+19
 &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;96] 5.168071e+19 8.362114e+19 1.353019e+20 2.189230e+20 3.542248e+20&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;When the number is large enough R converts the list into floating point
numbers. This conversion is mostly OK when working with probabilities, but
can be fatal when we need the exact result. In above example the last element
has been cropped. R reports &lt;code class=&quot;highlighter-rouge&quot;&gt;354224800000000000000&lt;/code&gt; while the 100th
number is &lt;code class=&quot;highlighter-rouge&quot;&gt;354224848179261915075&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The type conversion does not matter when visualizing. It won’t even mean a
pixel when plotted on the screen, so we will continue on and try to visualize
the relationship between &lt;script type=&quot;math/tex&quot;&gt;n&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;fib(n)&lt;/script&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/media/2016-01-11-100-days-of-fibonacci-day-8-r/fib.png&quot; alt=&quot;100 first Fibonacci numbers.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The relationship looks much like an exponential development. This, however,
is a subject for a later article.&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;I implemented the recursive edition of the Fibonacci algorithm in R. This
algorithm is efficient, and R provides efficient subroutines for handling
the array.&lt;/p&gt;

&lt;p&gt;After the implementation a simple plot of the relationship between &lt;script type=&quot;math/tex&quot;&gt;n&lt;/script&gt; and
&lt;script type=&quot;math/tex&quot;&gt;fib(n)&lt;/script&gt; was plotted. This was easily done in R, as R provides good 
abstractions for this.&lt;/p&gt;
</description>
        <pubDate>Mon, 11 Jan 2016 00:00:00 +0100</pubDate>
        <link>http://madsbuch.com/blog/100-days-of-fibonacci-day-8-r/</link>
        <guid isPermaLink="true">http://madsbuch.com/blog/100-days-of-fibonacci-day-8-r/</guid>
        
        
      </item>
    
      <item>
        <title>100 Days of Fibonacci - Day 7, Coq</title>
        <description>&lt;p&gt;I have been of a couple of days over the Christmas and New Year.
But now it is time to start my
&lt;a href=&quot;/blog/100-days-of-fibonacci-overview/&quot;&gt;100 days of Fibonacci&lt;/a&gt;
project again.&lt;/p&gt;

&lt;p&gt;Today I chose Coq and I decided to look at proving properties about
programs. The key idea in this post is to prove that two different
implementations of the Fibonacci function indeed are equivalent.
Concretely I have chosen the direct recursive and the accumulated
recursive implementations as the subjects.&lt;/p&gt;

&lt;p&gt;These implementations are the same
as in &lt;a href=&quot;/blog/100-days-of-fibonacci-day-0-haskell/&quot;&gt;the first article&lt;/a&gt;.
This is done deliberately as they are idiomatic to functional programming.
Furthermore, they showcase quite well why this has a value. The directly
recursive implementation is easy to understand and stays close to both
the definition of Fibonacci and the common understanding of the function.
On the other hand, the recursive function with the accumulator is harder
to understand but provides a significant speedup.&lt;/p&gt;

&lt;p&gt;In this article, I show that the rest of the program can be indifferent
to which implementation is in use. This is done by proving theorems, which
is considerably more time consuming that providing tests. The effort returns
in favor the strongest guarantee we can have for the property, a mathematical
proof.&lt;/p&gt;

&lt;h1 id=&quot;day-7---coq&quot;&gt;Day 7 - Coq!&lt;/h1&gt;
&lt;p&gt;As mentioned the two implementations are the directly recursive and
the recursive with accumulation. These are both implementations we have
&lt;a href=&quot;/blog/100-days-of-fibonacci-day-0-haskell/&quot;&gt;seen before&lt;/a&gt;.
But we use them again as they provide a good body for
showcasing proving program equivalence. Next we have the two implementations.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-coq&quot; data-lang=&quot;coq&quot;&gt;&lt;span class=&quot;k&quot;&gt;Fixpoint&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;fib_direct&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;nat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;nat&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;n'&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;n'&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;n''&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;fib_direct&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;n'&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;fib_direct&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;n''&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
              &lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Above is the directly recursive implementation and next is the
accumulated recursive implementation.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-coq&quot; data-lang=&quot;coq&quot;&gt;&lt;span class=&quot;k&quot;&gt;Fixpoint&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;fib_accumulator&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;nat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;nat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;nat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;nat&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;      &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;n'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;fib_accumulator&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;n'&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;(* An alias to scrape away unnecessary information *)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;Definition&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;fib_acc&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;nat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;fib_accumulator&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The results can be calculated by the &lt;code class=&quot;highlighter-rouge&quot;&gt;Compute&lt;/code&gt; command. It is
hereafter visible in the &lt;code class=&quot;highlighter-rouge&quot;&gt;*goals*&lt;/code&gt; window (Assuming you use the
&lt;a href=&quot;https://coq.inria.fr/&quot;&gt;proof assistant&lt;/a&gt;).&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-coq&quot; data-lang=&quot;coq&quot;&gt;&lt;span class=&quot;k&quot;&gt;Compute&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;fib_direct&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;Compute&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;fib_acc&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;A couple of things look a bit different. The function signature looks
kind of weird. Furthermore, we are doing some kind of match stuff with
something that looks a bit like numbers.&lt;/p&gt;

&lt;p&gt;In the function signature, we use the &lt;code class=&quot;highlighter-rouge&quot;&gt;Fixpoint&lt;/code&gt; to denote a recursive
function. This is because Coq encodes recursion in its type and
implement what’s called iso-recursion.&lt;/p&gt;

&lt;p&gt;For integers, Coq does not use the regular atomic data types we know from
ex. Java. Instead, it has (and only has) inductive data types. In these
&lt;a href=&quot;https://en.wikipedia.org/wiki/Peano_axioms&quot;&gt;Peano naturals&lt;/a&gt; has
been implemented. This means that zero is represented as &lt;code class=&quot;highlighter-rouge&quot;&gt;O&lt;/code&gt;, one
as &lt;code class=&quot;highlighter-rouge&quot;&gt;S O&lt;/code&gt;, two as &lt;code class=&quot;highlighter-rouge&quot;&gt;S (S O)&lt;/code&gt; and so forth (this does not implement integers
but only naturals which is just fine for Fibonacci).&lt;/p&gt;

&lt;p&gt;Coq automatically expands syntactic decimal numbers to its
internal representation. Hence
5 is just syntactic sugar for &lt;code class=&quot;highlighter-rouge&quot;&gt;S S S S S O&lt;/code&gt;.
This is the same representation I
&lt;a href=&quot;/blog/100-days-of-fibonacci-day-4-prolog/&quot;&gt;implemented in Prolog&lt;/a&gt; earlier on.&lt;/p&gt;

&lt;p&gt;As usual, the code is available on
&lt;a href=&quot;https://github.com/madsbuch/fibonacci/tree/master/coq&quot;&gt;Github&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It is necessary to be able to reduce data to atomic pieces to do the proving
we want to do. This is to create a total dependency between the type and its
value. Imagine Java’s &lt;code class=&quot;highlighter-rouge&quot;&gt;int&lt;/code&gt; type. This type holds, at least,
&lt;script type=&quot;math/tex&quot;&gt;2^{32}&lt;/script&gt; different
values without the compiler knowing which. In that case, it is not possible to
reason about the return value of a function, which we need for the next
section.&lt;/p&gt;

&lt;h1 id=&quot;coq---proof-assistant&quot;&gt;Coq - proof assistant&lt;/h1&gt;
&lt;p&gt;Coq is not meant as a general-purpose programming language. In fact, it is
a proof assistant. This means that it is not possible to interact with
the surrounding world. It is not possible to read command line arguments or
invoke system calls. On the other hand, Coq can prove properties.&lt;/p&gt;

&lt;p&gt;In the above we had two different implementations of the Fibonacci
function. One might wonder whether these functions always return the same
value. That is, does &lt;code class=&quot;highlighter-rouge&quot;&gt;fib_direct 10&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;fib_acc 10&lt;/code&gt; yield the same result?
This can easily be checked by running the code. The problem is when we
want to check for all values of &lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt;. Is it true that
&lt;code class=&quot;highlighter-rouge&quot;&gt;fib_direct n = fib_acc n&lt;/code&gt;? This we can actually prove in Coq, and
so I have done.&lt;/p&gt;

&lt;p&gt;The first step I took to prove equivalence of the implementations was to
characterize the Fibonacci function.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-coq&quot; data-lang=&quot;coq&quot;&gt;&lt;span class=&quot;k&quot;&gt;Definition&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;specification_of_fibonacci&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;nat&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;nat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;forall&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;nat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This is, in fact, a proposition. Is is &lt;em&gt;true&lt;/em&gt; if we have a function that behaves
as the specification. This specification is very close to the directly 
recursive implementation.&lt;/p&gt;

&lt;p&gt;The next thing is to prove that this definition is unambiguous. This means
that &lt;em&gt;f&lt;/em&gt; will behave identical independent to the actual implementation. In
Coq this looks like following (The whole code is available on
&lt;a href=&quot;https://github.com/madsbuch/fibonacci/blob/master/coq/fib.v&quot;&gt;Github&lt;/a&gt;).&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-coq&quot; data-lang=&quot;coq&quot;&gt;&lt;span class=&quot;k&quot;&gt;Lemma&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;there_is_only_one_fib&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;forall&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;f1&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;f2&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;nat&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;nat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;specification_of_fibonacci&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;f1&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;specification_of_fibonacci&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;f2&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;forall&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;nat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;f1&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;f2&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;Proof&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;unfold&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;specification_of_fibonacci&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;intros&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;f1&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;f2&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;intros&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;bc_f1_0&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;bc_f1_1&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ic_f1&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;(* Destruct the conjunctive clauses *)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;intros&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;bc_f2_0&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;bc_f2_1&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ic_f2&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   
  &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;(* strengthening the induction hypothesis *)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;H_fib&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;forall&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;nat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                    &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;f1&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;f2&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;f1&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;f2&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;intro&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;hf&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;Qed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;What happens above is that we specify a lemma. Given two functions, that
both satisfies the specification of the Fibonacci function, they yield the
same result for all values of &lt;em&gt;n&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;After the specification of the lemma, we provide an actual proof. this is a
series of commands that generates a function which in turn satisfies the &lt;em&gt;type&lt;/em&gt;
of the lemma. This process is somewhat out of scope, and I will look into this
in another post.&lt;/p&gt;

&lt;p&gt;After this, all we need to do is to prove that both the implementations indeed
satisfies the specification. Hereafter we can use the property that there is
only one Fibonacci function to prove the equivalence.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-coq&quot; data-lang=&quot;coq&quot;&gt;&lt;span class=&quot;k&quot;&gt;Lemma&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;fib_direct_satisfies_specification&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;specification_of_fibonacci&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;fib_direct&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;Proof&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;Qed&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;Lemma&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;fib_acc_satisfies_specification&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;specification_of_fibonacci&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;fib_acc&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;Proof&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;Qed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And the proof that they are equivalent&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-coq&quot; data-lang=&quot;coq&quot;&gt;&lt;span class=&quot;k&quot;&gt;Theorem&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;fib_direct_is_equivalent_to_fib_acc&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;forall&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;nat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;fib_acc&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;fib_direct&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;Proof&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;intros&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;rewrite&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;there_is_only_one_fib&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;fib_acc&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; 
                                 &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;fib_direct&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; 
                                 &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;fib_acc_satisfies_specification&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                                 &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;fib_direct_satisfies_specification&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;ne&quot;&gt;reflexivity&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;Qed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The signature of &lt;code class=&quot;highlighter-rouge&quot;&gt;there_is_only_one_fib&lt;/code&gt; was given above. We
specialize it with the arguments so we can rewrite our goal.
The goal is then rewritten with &lt;code class=&quot;highlighter-rouge&quot;&gt;forall n, fib_acc n = fib_direct n&lt;/code&gt;.
This yields a goal which is trivially true. Namely
&lt;code class=&quot;highlighter-rouge&quot;&gt;fib_direct n = fib_direct n&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We are now sure that for any &lt;em&gt;n&lt;/em&gt; we can provide to the directly recursive
implementation of Fibonacci, the other implementation yields the same
result.&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;In this post, I implemented the Fibonacci function in the same way
as in the first article.
These are idiomatic to functional programming and as such it makes sense
to keep using them here.&lt;/p&gt;

&lt;p&gt;They key concept introduced here is the notion of proving propositions.
I proved that the two implementations indeed behave identically. We have
scratched the surface when it comes to the underlying theory. But
already saw the fruits of the efforts: The direct implementation is slow
but easy to understand. The other implementation is faster but slightly more
complicated. We have used this to prove that they &lt;em&gt;always&lt;/em&gt; return the same
value for the same input.&lt;/p&gt;
</description>
        <pubDate>Mon, 04 Jan 2016 00:00:00 +0100</pubDate>
        <link>http://madsbuch.com/blog/100-days-of-fibonacci-day-7-coq/</link>
        <guid isPermaLink="true">http://madsbuch.com/blog/100-days-of-fibonacci-day-7-coq/</guid>
        
        
      </item>
    
  </channel>
</rss>
